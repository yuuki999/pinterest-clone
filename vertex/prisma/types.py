# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    hashedPassword: Optional[_str]
    accounts: 'AccountCreateManyNestedWithoutRelationsInput'
    sessions: 'SessionCreateManyNestedWithoutRelationsInput'
    boards: 'BoardCreateManyNestedWithoutRelationsInput'
    pins: 'PinCreateManyNestedWithoutRelationsInput'
    comments: 'CommentCreateManyNestedWithoutRelationsInput'
    likes: 'LikeCreateManyNestedWithoutRelationsInput'
    saves: 'SaveCreateManyNestedWithoutRelationsInput'
    followers: 'FollowCreateManyNestedWithoutRelationsInput'
    following: 'FollowCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    birthdate: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    hashedPassword: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    birthdate: datetime.datetime

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    hashedPassword: Optional[_str]
    birthdate: datetime.datetime
    accounts: 'AccountUpdateManyWithoutRelationsInput'
    sessions: 'SessionUpdateManyWithoutRelationsInput'
    boards: 'BoardUpdateManyWithoutRelationsInput'
    pins: 'PinUpdateManyWithoutRelationsInput'
    comments: 'CommentUpdateManyWithoutRelationsInput'
    likes: 'LikeUpdateManyWithoutRelationsInput'
    saves: 'SaveUpdateManyWithoutRelationsInput'
    followers: 'FollowUpdateManyWithoutRelationsInput'
    following: 'FollowUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    hashedPassword: Optional[_str]
    birthdate: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_emailVerified_OrderByInput = TypedDict(
    '_User_emailVerified_OrderByInput',
    {
        'emailVerified': 'SortOrder',
    },
    total=True
)

_User_image_OrderByInput = TypedDict(
    '_User_image_OrderByInput',
    {
        'image': 'SortOrder',
    },
    total=True
)

_User_hashedPassword_OrderByInput = TypedDict(
    '_User_hashedPassword_OrderByInput',
    {
        'hashedPassword': 'SortOrder',
    },
    total=True
)

_User_birthdate_OrderByInput = TypedDict(
    '_User_birthdate_OrderByInput',
    {
        'birthdate': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_name_OrderByInput',
    '_User_email_OrderByInput',
    '_User_emailVerified_OrderByInput',
    '_User_image_OrderByInput',
    '_User_hashedPassword_OrderByInput',
    '_User_birthdate_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    accounts: Union[bool, 'FindManyAccountArgsFromUser']
    sessions: Union[bool, 'FindManySessionArgsFromUser']
    boards: Union[bool, 'FindManyBoardArgsFromUser']
    pins: Union[bool, 'FindManyPinArgsFromUser']
    comments: Union[bool, 'FindManyCommentArgsFromUser']
    likes: Union[bool, 'FindManyLikeArgsFromUser']
    saves: Union[bool, 'FindManySaveArgsFromUser']
    followers: Union[bool, 'FindManyFollowArgsFromUser']
    following: Union[bool, 'FindManyFollowArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive1']
    boards: Union[bool, 'FindManyBoardArgsFromUserRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromUserRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromUserRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromUserRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive2']
    boards: Union[bool, 'FindManyBoardArgsFromUserRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromUserRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromUserRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromUserRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive3']
    boards: Union[bool, 'FindManyBoardArgsFromUserRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromUserRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromUserRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromUserRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive4']
    boards: Union[bool, 'FindManyBoardArgsFromUserRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromUserRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromUserRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromUserRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class AccountIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class AccountIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class AccountIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class AccountIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class SessionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class SessionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class SessionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class SessionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class BoardIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromUserRecursive1']


class BoardIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromUserRecursive2']


class BoardIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromUserRecursive3']


class BoardIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromUserRecursive4']


class BoardIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class BoardArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'BoardIncludeFromBoardRecursive1'


class BoardArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'BoardIncludeFromBoardRecursive2'


class BoardArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'BoardIncludeFromBoardRecursive3'


class BoardArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'BoardIncludeFromBoardRecursive4'


class BoardArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyBoardArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive1'


class FindManyBoardArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive2'


class FindManyBoardArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive3'


class FindManyBoardArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive4'


class FindManyBoardArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    
    

class PinIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    board: Union[bool, 'BoardArgsFromUserRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromUserRecursive1']


class PinIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    board: Union[bool, 'BoardArgsFromUserRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromUserRecursive2']


class PinIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    board: Union[bool, 'BoardArgsFromUserRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromUserRecursive3']


class PinIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    board: Union[bool, 'BoardArgsFromUserRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromUserRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromUserRecursive4']


class PinIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PinArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PinIncludeFromPinRecursive1'


class PinArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PinIncludeFromPinRecursive2'


class PinArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PinIncludeFromPinRecursive3'


class PinArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PinIncludeFromPinRecursive4'


class PinArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPinArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive1'


class FindManyPinArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive2'


class FindManyPinArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive3'


class FindManyPinArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive4'


class FindManyPinArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    
    

class CommentIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    pin: Union[bool, 'PinArgsFromUserRecursive1']
    user: Union[bool, 'UserArgsFromUserRecursive1']


class CommentIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    pin: Union[bool, 'PinArgsFromUserRecursive2']
    user: Union[bool, 'UserArgsFromUserRecursive2']


class CommentIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    pin: Union[bool, 'PinArgsFromUserRecursive3']
    user: Union[bool, 'UserArgsFromUserRecursive3']


class CommentIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    pin: Union[bool, 'PinArgsFromUserRecursive4']
    user: Union[bool, 'UserArgsFromUserRecursive4']


class CommentIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CommentArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCommentArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    pin: Union[bool, 'PinArgsFromUserRecursive1']


class LikeIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    pin: Union[bool, 'PinArgsFromUserRecursive2']


class LikeIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    pin: Union[bool, 'PinArgsFromUserRecursive3']


class LikeIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    pin: Union[bool, 'PinArgsFromUserRecursive4']


class LikeIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class LikeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyLikeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class SaveIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    pin: Union[bool, 'PinArgsFromUserRecursive1']


class SaveIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    pin: Union[bool, 'PinArgsFromUserRecursive2']


class SaveIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    pin: Union[bool, 'PinArgsFromUserRecursive3']


class SaveIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    pin: Union[bool, 'PinArgsFromUserRecursive4']


class SaveIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SaveArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SaveIncludeFromSaveRecursive1'


class SaveArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SaveIncludeFromSaveRecursive2'


class SaveArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SaveIncludeFromSaveRecursive3'


class SaveArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SaveIncludeFromSaveRecursive4'


class SaveArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySaveArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive1'


class FindManySaveArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive2'


class FindManySaveArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive3'


class FindManySaveArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive4'


class FindManySaveArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    
    

class FollowIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    follower: Union[bool, 'UserArgsFromUserRecursive1']
    following: Union[bool, 'UserArgsFromUserRecursive1']


class FollowIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    follower: Union[bool, 'UserArgsFromUserRecursive2']
    following: Union[bool, 'UserArgsFromUserRecursive2']


class FollowIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    follower: Union[bool, 'UserArgsFromUserRecursive3']
    following: Union[bool, 'UserArgsFromUserRecursive3']


class FollowIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    follower: Union[bool, 'UserArgsFromUserRecursive4']
    following: Union[bool, 'UserArgsFromUserRecursive4']


class FollowIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class FollowArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyFollowArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    hashedPassword: Union[None, _str, 'types.StringFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    boards: 'BoardListRelationFilter'
    pins: 'PinListRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    saves: 'SaveListRelationFilter'
    followers: 'FollowListRelationFilter'
    following: 'FollowListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    hashedPassword: Union[None, _str, 'types.StringFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    boards: 'BoardListRelationFilter'
    pins: 'PinListRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    saves: 'SaveListRelationFilter'
    followers: 'FollowListRelationFilter'
    following: 'FollowListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    hashedPassword: Union[None, _str, 'types.StringFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    boards: 'BoardListRelationFilter'
    pins: 'PinListRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    saves: 'SaveListRelationFilter'
    followers: 'FollowListRelationFilter'
    following: 'FollowListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    hashedPassword: Union[None, _str, 'types.StringFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    boards: 'BoardListRelationFilter'
    pins: 'PinListRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    saves: 'SaveListRelationFilter'
    followers: 'FollowListRelationFilter'
    following: 'FollowListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    hashedPassword: Union[None, _str, 'types.StringFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    boards: 'BoardListRelationFilter'
    pins: 'PinListRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    saves: 'SaveListRelationFilter'
    followers: 'FollowListRelationFilter'
    following: 'FollowListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    hashedPassword: Union[_str, 'types.StringWithAggregatesFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    hashedPassword: Union[_str, 'types.StringWithAggregatesFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    hashedPassword: Union[_str, 'types.StringWithAggregatesFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    hashedPassword: Union[_str, 'types.StringWithAggregatesFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    hashedPassword: Union[_str, 'types.StringWithAggregatesFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    email: _str
    emailVerified: datetime.datetime
    image: _str
    hashedPassword: _str
    birthdate: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    name: _str
    email: _str
    emailVerified: datetime.datetime
    image: _str
    hashedPassword: _str
    birthdate: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    name: bool
    email: bool
    emailVerified: bool
    image: bool
    hashedPassword: bool
    birthdate: bool
    createdAt: bool
    updatedAt: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    name: bool
    email: bool
    emailVerified: bool
    image: bool
    hashedPassword: bool
    birthdate: bool
    createdAt: bool
    updatedAt: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'email': bool,
        'emailVerified': bool,
        'image': bool,
        'hashedPassword': bool,
        'birthdate': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'email': int,
        'emailVerified': int,
        'image': int,
        'hashedPassword': int,
        'birthdate': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'name',
    'email',
    'emailVerified',
    'image',
    'hashedPassword',
    'birthdate',
    'accounts',
    'sessions',
    'boards',
    'pins',
    'comments',
    'likes',
    'saves',
    'followers',
    'following',
    'createdAt',
    'updatedAt',
]
UserScalarFieldKeys = Literal[
    'id',
    'name',
    'email',
    'emailVerified',
    'image',
    'hashedPassword',
    'birthdate',
    'createdAt',
    'updatedAt',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'accounts',
        'sessions',
        'boards',
        'pins',
        'comments',
        'likes',
        'saves',
        'followers',
        'following',
    ]

# Account types

class AccountOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Account create method"""
    id: _str
    userId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[_int]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    user: 'UserCreateNestedWithoutRelationsInput'


class AccountCreateInput(AccountOptionalCreateInput):
    """Required arguments to the Account create method"""
    type: _str
    provider: _str
    providerAccountId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AccountOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Account create method, without relations"""
    id: _str
    userId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[_int]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]


class AccountCreateWithoutRelationsInput(AccountOptionalCreateWithoutRelationsInput):
    """Required arguments to the Account create method, without relations"""
    type: _str
    provider: _str
    providerAccountId: _str

class AccountConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AccountCreateWithoutRelationsInput'
    where: 'AccountWhereUniqueInput'

class AccountCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AccountCreateWithoutRelationsInput'
    connect: 'AccountWhereUniqueInput'
    connect_or_create: 'AccountConnectOrCreateWithoutRelationsInput'


class AccountCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AccountCreateWithoutRelationsInput', List['AccountCreateWithoutRelationsInput']]
    connect: Union['AccountWhereUniqueInput', List['AccountWhereUniqueInput']]
    connect_or_create: Union['AccountConnectOrCreateWithoutRelationsInput', List['AccountConnectOrCreateWithoutRelationsInput']]

_AccountWhereUnique_id_Input = TypedDict(
    '_AccountWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_AccountCompoundprovider_providerAccountIdKeyInner = TypedDict(
    '_AccountCompoundprovider_providerAccountIdKeyInner',
    {
        'provider': '_str',
        'providerAccountId': '_str',
    },
    total=True
)

_AccountCompoundprovider_providerAccountIdKey = TypedDict(
    '_AccountCompoundprovider_providerAccountIdKey',
    {
        'provider_providerAccountId': '_AccountCompoundprovider_providerAccountIdKeyInner',
    },
    total=True
)

AccountWhereUniqueInput = Union[
    '_AccountWhereUnique_id_Input',
    '_AccountCompoundprovider_providerAccountIdKey',
]


class AccountUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[Union[AtomicIntInput, _int]]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    user: 'UserUpdateOneWithoutRelationsInput'


class AccountUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[Union[AtomicIntInput, _int]]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]


class AccountUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AccountCreateWithoutRelationsInput']
    connect: List['AccountWhereUniqueInput']
    connect_or_create: List['AccountConnectOrCreateWithoutRelationsInput']
    set: List['AccountWhereUniqueInput']
    disconnect: List['AccountWhereUniqueInput']
    delete: List['AccountWhereUniqueInput']

    # TODO
    # update: List['AccountUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AccountUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AccountScalarWhereInput']
    # upsert: List['AccountUpserteWithWhereUniqueWithoutRelationsInput']


class AccountUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AccountCreateWithoutRelationsInput'
    connect: 'AccountWhereUniqueInput'
    connect_or_create: 'AccountConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AccountUpdateInput'
    # upsert: 'AccountUpsertWithoutRelationsInput'


class AccountUpsertInput(TypedDict):
    create: 'AccountCreateInput'
    update: 'AccountUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Account_id_OrderByInput = TypedDict(
    '_Account_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Account_userId_OrderByInput = TypedDict(
    '_Account_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Account_type_OrderByInput = TypedDict(
    '_Account_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Account_provider_OrderByInput = TypedDict(
    '_Account_provider_OrderByInput',
    {
        'provider': 'SortOrder',
    },
    total=True
)

_Account_providerAccountId_OrderByInput = TypedDict(
    '_Account_providerAccountId_OrderByInput',
    {
        'providerAccountId': 'SortOrder',
    },
    total=True
)

_Account_refresh_token_OrderByInput = TypedDict(
    '_Account_refresh_token_OrderByInput',
    {
        'refresh_token': 'SortOrder',
    },
    total=True
)

_Account_access_token_OrderByInput = TypedDict(
    '_Account_access_token_OrderByInput',
    {
        'access_token': 'SortOrder',
    },
    total=True
)

_Account_expires_at_OrderByInput = TypedDict(
    '_Account_expires_at_OrderByInput',
    {
        'expires_at': 'SortOrder',
    },
    total=True
)

_Account_token_type_OrderByInput = TypedDict(
    '_Account_token_type_OrderByInput',
    {
        'token_type': 'SortOrder',
    },
    total=True
)

_Account_scope_OrderByInput = TypedDict(
    '_Account_scope_OrderByInput',
    {
        'scope': 'SortOrder',
    },
    total=True
)

_Account_id_token_OrderByInput = TypedDict(
    '_Account_id_token_OrderByInput',
    {
        'id_token': 'SortOrder',
    },
    total=True
)

_Account_session_state_OrderByInput = TypedDict(
    '_Account_session_state_OrderByInput',
    {
        'session_state': 'SortOrder',
    },
    total=True
)

_Account_RelevanceInner = TypedDict(
    '_Account_RelevanceInner',
    {
        'fields': 'List[AccountScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Account_RelevanceOrderByInput = TypedDict(
    '_Account_RelevanceOrderByInput',
    {
        '_relevance': '_Account_RelevanceInner',
    },
    total=True
)

AccountOrderByInput = Union[
    '_Account_id_OrderByInput',
    '_Account_userId_OrderByInput',
    '_Account_type_OrderByInput',
    '_Account_provider_OrderByInput',
    '_Account_providerAccountId_OrderByInput',
    '_Account_refresh_token_OrderByInput',
    '_Account_access_token_OrderByInput',
    '_Account_expires_at_OrderByInput',
    '_Account_token_type_OrderByInput',
    '_Account_scope_OrderByInput',
    '_Account_id_token_OrderByInput',
    '_Account_session_state_OrderByInput',
    '_Account_RelevanceOrderByInput',
]



# recursive Account types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AccountRelationFilter = TypedDict(
    'AccountRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AccountListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AccountInclude(TypedDict, total=False):
    """Account relational arguments"""
    user: Union[bool, 'UserArgsFromAccount']


    

class UserIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive1']
    boards: Union[bool, 'FindManyBoardArgsFromAccountRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromAccountRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromAccountRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromAccountRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromAccountRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromAccountRecursive1']


class UserIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive2']
    boards: Union[bool, 'FindManyBoardArgsFromAccountRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromAccountRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromAccountRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromAccountRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromAccountRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromAccountRecursive2']


class UserIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive3']
    boards: Union[bool, 'FindManyBoardArgsFromAccountRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromAccountRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromAccountRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromAccountRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromAccountRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromAccountRecursive3']


class UserIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive4']
    boards: Union[bool, 'FindManyBoardArgsFromAccountRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromAccountRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromAccountRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromAccountRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromAccountRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromAccountRecursive4']


class UserIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class UserArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyUserArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class AccountIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class AccountIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class AccountIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class AccountIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class AccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyAccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class SessionIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class SessionIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class SessionIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class SessionIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class SessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManySessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class BoardIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromAccountRecursive1']


class BoardIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromAccountRecursive2']


class BoardIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromAccountRecursive3']


class BoardIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromAccountRecursive4']


class BoardIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class BoardArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'BoardIncludeFromBoardRecursive1'


class BoardArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'BoardIncludeFromBoardRecursive2'


class BoardArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'BoardIncludeFromBoardRecursive3'


class BoardArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'BoardIncludeFromBoardRecursive4'


class BoardArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyBoardArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive1'


class FindManyBoardArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive2'


class FindManyBoardArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive3'


class FindManyBoardArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive4'


class FindManyBoardArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    
    

class PinIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']
    board: Union[bool, 'BoardArgsFromAccountRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromAccountRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromAccountRecursive1']


class PinIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']
    board: Union[bool, 'BoardArgsFromAccountRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromAccountRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromAccountRecursive2']


class PinIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']
    board: Union[bool, 'BoardArgsFromAccountRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromAccountRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromAccountRecursive3']


class PinIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']
    board: Union[bool, 'BoardArgsFromAccountRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromAccountRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromAccountRecursive4']


class PinIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class PinArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'PinIncludeFromPinRecursive1'


class PinArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'PinIncludeFromPinRecursive2'


class PinArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'PinIncludeFromPinRecursive3'


class PinArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'PinIncludeFromPinRecursive4'


class PinArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyPinArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive1'


class FindManyPinArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive2'


class FindManyPinArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive3'


class FindManyPinArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive4'


class FindManyPinArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    
    

class CommentIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    pin: Union[bool, 'PinArgsFromAccountRecursive1']
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class CommentIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    pin: Union[bool, 'PinArgsFromAccountRecursive2']
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class CommentIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    pin: Union[bool, 'PinArgsFromAccountRecursive3']
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class CommentIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    pin: Union[bool, 'PinArgsFromAccountRecursive4']
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class CommentIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class CommentArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyCommentArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']
    pin: Union[bool, 'PinArgsFromAccountRecursive1']


class LikeIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']
    pin: Union[bool, 'PinArgsFromAccountRecursive2']


class LikeIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']
    pin: Union[bool, 'PinArgsFromAccountRecursive3']


class LikeIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']
    pin: Union[bool, 'PinArgsFromAccountRecursive4']


class LikeIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class LikeArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyLikeArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class SaveIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']
    pin: Union[bool, 'PinArgsFromAccountRecursive1']


class SaveIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']
    pin: Union[bool, 'PinArgsFromAccountRecursive2']


class SaveIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']
    pin: Union[bool, 'PinArgsFromAccountRecursive3']


class SaveIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']
    pin: Union[bool, 'PinArgsFromAccountRecursive4']


class SaveIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class SaveArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SaveIncludeFromSaveRecursive1'


class SaveArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SaveIncludeFromSaveRecursive2'


class SaveArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SaveIncludeFromSaveRecursive3'


class SaveArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SaveIncludeFromSaveRecursive4'


class SaveArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManySaveArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive1'


class FindManySaveArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive2'


class FindManySaveArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive3'


class FindManySaveArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive4'


class FindManySaveArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    
    

class FollowIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    follower: Union[bool, 'UserArgsFromAccountRecursive1']
    following: Union[bool, 'UserArgsFromAccountRecursive1']


class FollowIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    follower: Union[bool, 'UserArgsFromAccountRecursive2']
    following: Union[bool, 'UserArgsFromAccountRecursive2']


class FollowIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    follower: Union[bool, 'UserArgsFromAccountRecursive3']
    following: Union[bool, 'UserArgsFromAccountRecursive3']


class FollowIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    follower: Union[bool, 'UserArgsFromAccountRecursive4']
    following: Union[bool, 'UserArgsFromAccountRecursive4']


class FollowIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class FollowArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyFollowArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    


FindManyAccountArgs = FindManyAccountArgsFromAccount
FindFirstAccountArgs = FindManyAccountArgsFromAccount


    

class AccountWhereInput(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive1', List['AccountWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive1']
    OR: List['AccountWhereInputRecursive1']
    NOT: List['AccountWhereInputRecursive1']


class AccountWhereInputRecursive1(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive2', List['AccountWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive2']
    OR: List['AccountWhereInputRecursive2']
    NOT: List['AccountWhereInputRecursive2']


class AccountWhereInputRecursive2(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive3', List['AccountWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive3']
    OR: List['AccountWhereInputRecursive3']
    NOT: List['AccountWhereInputRecursive3']


class AccountWhereInputRecursive3(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive4', List['AccountWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive4']
    OR: List['AccountWhereInputRecursive4']
    NOT: List['AccountWhereInputRecursive4']


class AccountWhereInputRecursive4(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'



# aggregate Account types


    

class AccountScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive1']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive1']


class AccountScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive2']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive2']


class AccountScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive3']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive3']


class AccountScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive4']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive4']


class AccountScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']



class AccountGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: _str
    access_token: _str
    expires_at: _int
    token_type: _str
    scope: _str
    id_token: _str
    session_state: _str
    _sum: 'AccountSumAggregateOutput'
    _avg: 'AccountAvgAggregateOutput'
    _min: 'AccountMinAggregateOutput'
    _max: 'AccountMaxAggregateOutput'
    _count: 'AccountCountAggregateOutput'


class AccountAvgAggregateOutput(TypedDict, total=False):
    """Account output for aggregating averages"""
    expires_at: float


class AccountSumAggregateOutput(TypedDict, total=False):
    """Account output for aggregating sums"""
    expires_at: _int


class AccountScalarAggregateOutput(TypedDict, total=False):
    """Account output including scalar fields"""
    id: _str
    userId: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: _str
    access_token: _str
    expires_at: _int
    token_type: _str
    scope: _str
    id_token: _str
    session_state: _str


AccountMinAggregateOutput = AccountScalarAggregateOutput
AccountMaxAggregateOutput = AccountScalarAggregateOutput


class AccountMaxAggregateInput(TypedDict, total=False):
    """Account input for aggregating by max"""
    id: bool
    userId: bool
    type: bool
    provider: bool
    providerAccountId: bool
    refresh_token: bool
    access_token: bool
    expires_at: bool
    token_type: bool
    scope: bool
    id_token: bool
    session_state: bool


class AccountMinAggregateInput(TypedDict, total=False):
    """Account input for aggregating by min"""
    id: bool
    userId: bool
    type: bool
    provider: bool
    providerAccountId: bool
    refresh_token: bool
    access_token: bool
    expires_at: bool
    token_type: bool
    scope: bool
    id_token: bool
    session_state: bool


class AccountNumberAggregateInput(TypedDict, total=False):
    """Account input for aggregating numbers"""
    expires_at: bool


AccountAvgAggregateInput = AccountNumberAggregateInput
AccountSumAggregateInput = AccountNumberAggregateInput


AccountCountAggregateInput = TypedDict(
    'AccountCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'type': bool,
        'provider': bool,
        'providerAccountId': bool,
        'refresh_token': bool,
        'access_token': bool,
        'expires_at': bool,
        'token_type': bool,
        'scope': bool,
        'id_token': bool,
        'session_state': bool,
        '_all': bool,
    },
    total=False,
)

AccountCountAggregateOutput = TypedDict(
    'AccountCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'type': int,
        'provider': int,
        'providerAccountId': int,
        'refresh_token': int,
        'access_token': int,
        'expires_at': int,
        'token_type': int,
        'scope': int,
        'id_token': int,
        'session_state': int,
        '_all': int,
    },
    total=False,
)


AccountKeys = Literal[
    'id',
    'userId',
    'type',
    'provider',
    'providerAccountId',
    'refresh_token',
    'access_token',
    'expires_at',
    'token_type',
    'scope',
    'id_token',
    'session_state',
    'user',
]
AccountScalarFieldKeys = Literal[
    'id',
    'userId',
    'type',
    'provider',
    'providerAccountId',
    'refresh_token',
    'access_token',
    'expires_at',
    'token_type',
    'scope',
    'id_token',
    'session_state',
]
AccountScalarFieldKeysT = TypeVar('AccountScalarFieldKeysT', bound=AccountScalarFieldKeys)

AccountRelationalFieldKeys = Literal[
        'user',
    ]

# Session types

class SessionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Session create method"""
    id: _str
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'


class SessionCreateInput(SessionOptionalCreateInput):
    """Required arguments to the Session create method"""
    sessionToken: _str
    expires: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SessionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Session create method, without relations"""
    id: _str
    userId: _str


class SessionCreateWithoutRelationsInput(SessionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Session create method, without relations"""
    sessionToken: _str
    expires: datetime.datetime

class SessionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SessionCreateWithoutRelationsInput'
    where: 'SessionWhereUniqueInput'

class SessionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    connect_or_create: 'SessionConnectOrCreateWithoutRelationsInput'


class SessionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SessionCreateWithoutRelationsInput', List['SessionCreateWithoutRelationsInput']]
    connect: Union['SessionWhereUniqueInput', List['SessionWhereUniqueInput']]
    connect_or_create: Union['SessionConnectOrCreateWithoutRelationsInput', List['SessionConnectOrCreateWithoutRelationsInput']]

_SessionWhereUnique_id_Input = TypedDict(
    '_SessionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_SessionWhereUnique_sessionToken_Input = TypedDict(
    '_SessionWhereUnique_sessionToken_Input',
    {
        'sessionToken': '_str',
    },
    total=True
)

SessionWhereUniqueInput = Union[
    '_SessionWhereUnique_id_Input',
    '_SessionWhereUnique_sessionToken_Input',
]


class SessionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class SessionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime


class SessionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SessionCreateWithoutRelationsInput']
    connect: List['SessionWhereUniqueInput']
    connect_or_create: List['SessionConnectOrCreateWithoutRelationsInput']
    set: List['SessionWhereUniqueInput']
    disconnect: List['SessionWhereUniqueInput']
    delete: List['SessionWhereUniqueInput']

    # TODO
    # update: List['SessionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SessionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SessionScalarWhereInput']
    # upsert: List['SessionUpserteWithWhereUniqueWithoutRelationsInput']


class SessionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    connect_or_create: 'SessionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SessionUpdateInput'
    # upsert: 'SessionUpsertWithoutRelationsInput'


class SessionUpsertInput(TypedDict):
    create: 'SessionCreateInput'
    update: 'SessionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Session_id_OrderByInput = TypedDict(
    '_Session_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Session_sessionToken_OrderByInput = TypedDict(
    '_Session_sessionToken_OrderByInput',
    {
        'sessionToken': 'SortOrder',
    },
    total=True
)

_Session_userId_OrderByInput = TypedDict(
    '_Session_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Session_expires_OrderByInput = TypedDict(
    '_Session_expires_OrderByInput',
    {
        'expires': 'SortOrder',
    },
    total=True
)

_Session_RelevanceInner = TypedDict(
    '_Session_RelevanceInner',
    {
        'fields': 'List[SessionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Session_RelevanceOrderByInput = TypedDict(
    '_Session_RelevanceOrderByInput',
    {
        '_relevance': '_Session_RelevanceInner',
    },
    total=True
)

SessionOrderByInput = Union[
    '_Session_id_OrderByInput',
    '_Session_sessionToken_OrderByInput',
    '_Session_userId_OrderByInput',
    '_Session_expires_OrderByInput',
    '_Session_RelevanceOrderByInput',
]



# recursive Session types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SessionRelationFilter = TypedDict(
    'SessionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SessionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SessionInclude(TypedDict, total=False):
    """Session relational arguments"""
    user: Union[bool, 'UserArgsFromSession']


    

class UserIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive1']
    boards: Union[bool, 'FindManyBoardArgsFromSessionRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromSessionRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromSessionRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromSessionRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromSessionRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromSessionRecursive1']


class UserIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive2']
    boards: Union[bool, 'FindManyBoardArgsFromSessionRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromSessionRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromSessionRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromSessionRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromSessionRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromSessionRecursive2']


class UserIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive3']
    boards: Union[bool, 'FindManyBoardArgsFromSessionRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromSessionRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromSessionRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromSessionRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromSessionRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromSessionRecursive3']


class UserIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive4']
    boards: Union[bool, 'FindManyBoardArgsFromSessionRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromSessionRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromSessionRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromSessionRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromSessionRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromSessionRecursive4']


class UserIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class AccountIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class AccountIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class AccountIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class AccountIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class AccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyAccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class SessionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class SessionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class SessionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class SessionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class SessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManySessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class BoardIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromSessionRecursive1']


class BoardIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromSessionRecursive2']


class BoardIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromSessionRecursive3']


class BoardIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromSessionRecursive4']


class BoardIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class BoardArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'BoardIncludeFromBoardRecursive1'


class BoardArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'BoardIncludeFromBoardRecursive2'


class BoardArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'BoardIncludeFromBoardRecursive3'


class BoardArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'BoardIncludeFromBoardRecursive4'


class BoardArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyBoardArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive1'


class FindManyBoardArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive2'


class FindManyBoardArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive3'


class FindManyBoardArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive4'


class FindManyBoardArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    
    

class PinIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']
    board: Union[bool, 'BoardArgsFromSessionRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromSessionRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromSessionRecursive1']


class PinIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']
    board: Union[bool, 'BoardArgsFromSessionRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromSessionRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromSessionRecursive2']


class PinIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']
    board: Union[bool, 'BoardArgsFromSessionRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromSessionRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromSessionRecursive3']


class PinIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']
    board: Union[bool, 'BoardArgsFromSessionRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromSessionRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromSessionRecursive4']


class PinIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class PinArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PinIncludeFromPinRecursive1'


class PinArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PinIncludeFromPinRecursive2'


class PinArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PinIncludeFromPinRecursive3'


class PinArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PinIncludeFromPinRecursive4'


class PinArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyPinArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive1'


class FindManyPinArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive2'


class FindManyPinArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive3'


class FindManyPinArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive4'


class FindManyPinArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    
    

class CommentIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    pin: Union[bool, 'PinArgsFromSessionRecursive1']
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class CommentIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    pin: Union[bool, 'PinArgsFromSessionRecursive2']
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class CommentIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    pin: Union[bool, 'PinArgsFromSessionRecursive3']
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class CommentIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    pin: Union[bool, 'PinArgsFromSessionRecursive4']
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class CommentIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class CommentArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyCommentArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']
    pin: Union[bool, 'PinArgsFromSessionRecursive1']


class LikeIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']
    pin: Union[bool, 'PinArgsFromSessionRecursive2']


class LikeIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']
    pin: Union[bool, 'PinArgsFromSessionRecursive3']


class LikeIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']
    pin: Union[bool, 'PinArgsFromSessionRecursive4']


class LikeIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class LikeArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyLikeArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class SaveIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']
    pin: Union[bool, 'PinArgsFromSessionRecursive1']


class SaveIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']
    pin: Union[bool, 'PinArgsFromSessionRecursive2']


class SaveIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']
    pin: Union[bool, 'PinArgsFromSessionRecursive3']


class SaveIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']
    pin: Union[bool, 'PinArgsFromSessionRecursive4']


class SaveIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class SaveArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SaveIncludeFromSaveRecursive1'


class SaveArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SaveIncludeFromSaveRecursive2'


class SaveArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SaveIncludeFromSaveRecursive3'


class SaveArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SaveIncludeFromSaveRecursive4'


class SaveArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManySaveArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive1'


class FindManySaveArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive2'


class FindManySaveArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive3'


class FindManySaveArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive4'


class FindManySaveArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    
    

class FollowIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    follower: Union[bool, 'UserArgsFromSessionRecursive1']
    following: Union[bool, 'UserArgsFromSessionRecursive1']


class FollowIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    follower: Union[bool, 'UserArgsFromSessionRecursive2']
    following: Union[bool, 'UserArgsFromSessionRecursive2']


class FollowIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    follower: Union[bool, 'UserArgsFromSessionRecursive3']
    following: Union[bool, 'UserArgsFromSessionRecursive3']


class FollowIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    follower: Union[bool, 'UserArgsFromSessionRecursive4']
    following: Union[bool, 'UserArgsFromSessionRecursive4']


class FollowIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class FollowArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyFollowArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    


FindManySessionArgs = FindManySessionArgsFromSession
FindFirstSessionArgs = FindManySessionArgsFromSession


    

class SessionWhereInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive1', List['SessionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive1']
    OR: List['SessionWhereInputRecursive1']
    NOT: List['SessionWhereInputRecursive1']


class SessionWhereInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive2', List['SessionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive2']
    OR: List['SessionWhereInputRecursive2']
    NOT: List['SessionWhereInputRecursive2']


class SessionWhereInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive3', List['SessionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive3']
    OR: List['SessionWhereInputRecursive3']
    NOT: List['SessionWhereInputRecursive3']


class SessionWhereInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive4', List['SessionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive4']
    OR: List['SessionWhereInputRecursive4']
    NOT: List['SessionWhereInputRecursive4']


class SessionWhereInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate Session types


    

class SessionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive1']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive1']


class SessionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive2']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive2']


class SessionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive3']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive3']


class SessionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive4']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive4']


class SessionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SessionGroupByOutput(TypedDict, total=False):
    id: _str
    sessionToken: _str
    userId: _str
    expires: datetime.datetime
    _sum: 'SessionSumAggregateOutput'
    _avg: 'SessionAvgAggregateOutput'
    _min: 'SessionMinAggregateOutput'
    _max: 'SessionMaxAggregateOutput'
    _count: 'SessionCountAggregateOutput'


class SessionAvgAggregateOutput(TypedDict, total=False):
    """Session output for aggregating averages"""


class SessionSumAggregateOutput(TypedDict, total=False):
    """Session output for aggregating sums"""


class SessionScalarAggregateOutput(TypedDict, total=False):
    """Session output including scalar fields"""
    id: _str
    sessionToken: _str
    userId: _str
    expires: datetime.datetime


SessionMinAggregateOutput = SessionScalarAggregateOutput
SessionMaxAggregateOutput = SessionScalarAggregateOutput


class SessionMaxAggregateInput(TypedDict, total=False):
    """Session input for aggregating by max"""
    id: bool
    sessionToken: bool
    userId: bool
    expires: bool


class SessionMinAggregateInput(TypedDict, total=False):
    """Session input for aggregating by min"""
    id: bool
    sessionToken: bool
    userId: bool
    expires: bool


class SessionNumberAggregateInput(TypedDict, total=False):
    """Session input for aggregating numbers"""


SessionAvgAggregateInput = SessionNumberAggregateInput
SessionSumAggregateInput = SessionNumberAggregateInput


SessionCountAggregateInput = TypedDict(
    'SessionCountAggregateInput',
    {
        'id': bool,
        'sessionToken': bool,
        'userId': bool,
        'expires': bool,
        '_all': bool,
    },
    total=False,
)

SessionCountAggregateOutput = TypedDict(
    'SessionCountAggregateOutput',
    {
        'id': int,
        'sessionToken': int,
        'userId': int,
        'expires': int,
        '_all': int,
    },
    total=False,
)


SessionKeys = Literal[
    'id',
    'sessionToken',
    'userId',
    'expires',
    'user',
]
SessionScalarFieldKeys = Literal[
    'id',
    'sessionToken',
    'userId',
    'expires',
]
SessionScalarFieldKeysT = TypeVar('SessionScalarFieldKeysT', bound=SessionScalarFieldKeys)

SessionRelationalFieldKeys = Literal[
        'user',
    ]

# Board types

class BoardOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Board create method"""
    id: _str
    description: Optional[_str]
    isPrivate: _bool
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    pins: 'PinCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BoardCreateInput(BoardOptionalCreateInput):
    """Required arguments to the Board create method"""
    title: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class BoardOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Board create method, without relations"""
    id: _str
    description: Optional[_str]
    isPrivate: _bool
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BoardCreateWithoutRelationsInput(BoardOptionalCreateWithoutRelationsInput):
    """Required arguments to the Board create method, without relations"""
    title: _str

class BoardConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'BoardCreateWithoutRelationsInput'
    where: 'BoardWhereUniqueInput'

class BoardCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'BoardCreateWithoutRelationsInput'
    connect: 'BoardWhereUniqueInput'
    connect_or_create: 'BoardConnectOrCreateWithoutRelationsInput'


class BoardCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['BoardCreateWithoutRelationsInput', List['BoardCreateWithoutRelationsInput']]
    connect: Union['BoardWhereUniqueInput', List['BoardWhereUniqueInput']]
    connect_or_create: Union['BoardConnectOrCreateWithoutRelationsInput', List['BoardConnectOrCreateWithoutRelationsInput']]

_BoardWhereUnique_id_Input = TypedDict(
    '_BoardWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

BoardWhereUniqueInput = _BoardWhereUnique_id_Input


class BoardUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    description: Optional[_str]
    isPrivate: _bool
    user: 'UserUpdateOneWithoutRelationsInput'
    pins: 'PinUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BoardUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    description: Optional[_str]
    isPrivate: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BoardUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['BoardCreateWithoutRelationsInput']
    connect: List['BoardWhereUniqueInput']
    connect_or_create: List['BoardConnectOrCreateWithoutRelationsInput']
    set: List['BoardWhereUniqueInput']
    disconnect: List['BoardWhereUniqueInput']
    delete: List['BoardWhereUniqueInput']

    # TODO
    # update: List['BoardUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['BoardUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['BoardScalarWhereInput']
    # upsert: List['BoardUpserteWithWhereUniqueWithoutRelationsInput']


class BoardUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'BoardCreateWithoutRelationsInput'
    connect: 'BoardWhereUniqueInput'
    connect_or_create: 'BoardConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'BoardUpdateInput'
    # upsert: 'BoardUpsertWithoutRelationsInput'


class BoardUpsertInput(TypedDict):
    create: 'BoardCreateInput'
    update: 'BoardUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Board_id_OrderByInput = TypedDict(
    '_Board_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Board_title_OrderByInput = TypedDict(
    '_Board_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Board_description_OrderByInput = TypedDict(
    '_Board_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Board_isPrivate_OrderByInput = TypedDict(
    '_Board_isPrivate_OrderByInput',
    {
        'isPrivate': 'SortOrder',
    },
    total=True
)

_Board_userId_OrderByInput = TypedDict(
    '_Board_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Board_createdAt_OrderByInput = TypedDict(
    '_Board_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Board_updatedAt_OrderByInput = TypedDict(
    '_Board_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Board_RelevanceInner = TypedDict(
    '_Board_RelevanceInner',
    {
        'fields': 'List[BoardScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Board_RelevanceOrderByInput = TypedDict(
    '_Board_RelevanceOrderByInput',
    {
        '_relevance': '_Board_RelevanceInner',
    },
    total=True
)

BoardOrderByInput = Union[
    '_Board_id_OrderByInput',
    '_Board_title_OrderByInput',
    '_Board_description_OrderByInput',
    '_Board_isPrivate_OrderByInput',
    '_Board_userId_OrderByInput',
    '_Board_createdAt_OrderByInput',
    '_Board_updatedAt_OrderByInput',
    '_Board_RelevanceOrderByInput',
]



# recursive Board types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

BoardRelationFilter = TypedDict(
    'BoardRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class BoardListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class BoardInclude(TypedDict, total=False):
    """Board relational arguments"""
    user: Union[bool, 'UserArgsFromBoard']
    pins: Union[bool, 'FindManyPinArgsFromBoard']


    

class UserIncludeFromBoard(TypedDict, total=False):
    """Relational arguments for Board"""
    accounts: Union[bool, 'FindManyAccountArgsFromBoardRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromBoardRecursive1']
    boards: Union[bool, 'FindManyBoardArgsFromBoardRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromBoardRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromBoardRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromBoardRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromBoardRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromBoardRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromBoardRecursive1']


class UserIncludeFromBoardRecursive1(TypedDict, total=False):
    """Relational arguments for Board"""
    accounts: Union[bool, 'FindManyAccountArgsFromBoardRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromBoardRecursive2']
    boards: Union[bool, 'FindManyBoardArgsFromBoardRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromBoardRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromBoardRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromBoardRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromBoardRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromBoardRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromBoardRecursive2']


class UserIncludeFromBoardRecursive2(TypedDict, total=False):
    """Relational arguments for Board"""
    accounts: Union[bool, 'FindManyAccountArgsFromBoardRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromBoardRecursive3']
    boards: Union[bool, 'FindManyBoardArgsFromBoardRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromBoardRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromBoardRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromBoardRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromBoardRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromBoardRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromBoardRecursive3']


class UserIncludeFromBoardRecursive3(TypedDict, total=False):
    """Relational arguments for Board"""
    accounts: Union[bool, 'FindManyAccountArgsFromBoardRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromBoardRecursive4']
    boards: Union[bool, 'FindManyBoardArgsFromBoardRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromBoardRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromBoardRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromBoardRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromBoardRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromBoardRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromBoardRecursive4']


class UserIncludeFromBoardRecursive4(TypedDict, total=False):
    """Relational arguments for Board"""

    

class UserArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    
    

class FindManyUserArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromBoard(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive1']


class AccountIncludeFromBoardRecursive1(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive2']


class AccountIncludeFromBoardRecursive2(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive3']


class AccountIncludeFromBoardRecursive3(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive4']


class AccountIncludeFromBoardRecursive4(TypedDict, total=False):
    """Relational arguments for Board"""

    

class AccountArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    
    

class FindManyAccountArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromBoard(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive1']


class SessionIncludeFromBoardRecursive1(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive2']


class SessionIncludeFromBoardRecursive2(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive3']


class SessionIncludeFromBoardRecursive3(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive4']


class SessionIncludeFromBoardRecursive4(TypedDict, total=False):
    """Relational arguments for Board"""

    

class SessionArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    
    

class FindManySessionArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class BoardIncludeFromBoard(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromBoardRecursive1']


class BoardIncludeFromBoardRecursive1(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromBoardRecursive2']


class BoardIncludeFromBoardRecursive2(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromBoardRecursive3']


class BoardIncludeFromBoardRecursive3(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromBoardRecursive4']


class BoardIncludeFromBoardRecursive4(TypedDict, total=False):
    """Relational arguments for Board"""

    

class BoardArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    include: 'BoardIncludeFromBoardRecursive1'


class BoardArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    include: 'BoardIncludeFromBoardRecursive2'


class BoardArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    include: 'BoardIncludeFromBoardRecursive3'


class BoardArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    include: 'BoardIncludeFromBoardRecursive4'


class BoardArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    
    

class FindManyBoardArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive1'


class FindManyBoardArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive2'


class FindManyBoardArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive3'


class FindManyBoardArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive4'


class FindManyBoardArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    
    

class PinIncludeFromBoard(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive1']
    board: Union[bool, 'BoardArgsFromBoardRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromBoardRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromBoardRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromBoardRecursive1']


class PinIncludeFromBoardRecursive1(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive2']
    board: Union[bool, 'BoardArgsFromBoardRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromBoardRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromBoardRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromBoardRecursive2']


class PinIncludeFromBoardRecursive2(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive3']
    board: Union[bool, 'BoardArgsFromBoardRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromBoardRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromBoardRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromBoardRecursive3']


class PinIncludeFromBoardRecursive3(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive4']
    board: Union[bool, 'BoardArgsFromBoardRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromBoardRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromBoardRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromBoardRecursive4']


class PinIncludeFromBoardRecursive4(TypedDict, total=False):
    """Relational arguments for Board"""

    

class PinArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    include: 'PinIncludeFromPinRecursive1'


class PinArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    include: 'PinIncludeFromPinRecursive2'


class PinArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    include: 'PinIncludeFromPinRecursive3'


class PinArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    include: 'PinIncludeFromPinRecursive4'


class PinArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    
    

class FindManyPinArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive1'


class FindManyPinArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive2'


class FindManyPinArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive3'


class FindManyPinArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive4'


class FindManyPinArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    
    

class CommentIncludeFromBoard(TypedDict, total=False):
    """Relational arguments for Board"""
    pin: Union[bool, 'PinArgsFromBoardRecursive1']
    user: Union[bool, 'UserArgsFromBoardRecursive1']


class CommentIncludeFromBoardRecursive1(TypedDict, total=False):
    """Relational arguments for Board"""
    pin: Union[bool, 'PinArgsFromBoardRecursive2']
    user: Union[bool, 'UserArgsFromBoardRecursive2']


class CommentIncludeFromBoardRecursive2(TypedDict, total=False):
    """Relational arguments for Board"""
    pin: Union[bool, 'PinArgsFromBoardRecursive3']
    user: Union[bool, 'UserArgsFromBoardRecursive3']


class CommentIncludeFromBoardRecursive3(TypedDict, total=False):
    """Relational arguments for Board"""
    pin: Union[bool, 'PinArgsFromBoardRecursive4']
    user: Union[bool, 'UserArgsFromBoardRecursive4']


class CommentIncludeFromBoardRecursive4(TypedDict, total=False):
    """Relational arguments for Board"""

    

class CommentArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    
    

class FindManyCommentArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromBoard(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive1']
    pin: Union[bool, 'PinArgsFromBoardRecursive1']


class LikeIncludeFromBoardRecursive1(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive2']
    pin: Union[bool, 'PinArgsFromBoardRecursive2']


class LikeIncludeFromBoardRecursive2(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive3']
    pin: Union[bool, 'PinArgsFromBoardRecursive3']


class LikeIncludeFromBoardRecursive3(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive4']
    pin: Union[bool, 'PinArgsFromBoardRecursive4']


class LikeIncludeFromBoardRecursive4(TypedDict, total=False):
    """Relational arguments for Board"""

    

class LikeArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    
    

class FindManyLikeArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class SaveIncludeFromBoard(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive1']
    pin: Union[bool, 'PinArgsFromBoardRecursive1']


class SaveIncludeFromBoardRecursive1(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive2']
    pin: Union[bool, 'PinArgsFromBoardRecursive2']


class SaveIncludeFromBoardRecursive2(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive3']
    pin: Union[bool, 'PinArgsFromBoardRecursive3']


class SaveIncludeFromBoardRecursive3(TypedDict, total=False):
    """Relational arguments for Board"""
    user: Union[bool, 'UserArgsFromBoardRecursive4']
    pin: Union[bool, 'PinArgsFromBoardRecursive4']


class SaveIncludeFromBoardRecursive4(TypedDict, total=False):
    """Relational arguments for Board"""

    

class SaveArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    include: 'SaveIncludeFromSaveRecursive1'


class SaveArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    include: 'SaveIncludeFromSaveRecursive2'


class SaveArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    include: 'SaveIncludeFromSaveRecursive3'


class SaveArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    include: 'SaveIncludeFromSaveRecursive4'


class SaveArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    
    

class FindManySaveArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive1'


class FindManySaveArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive2'


class FindManySaveArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive3'


class FindManySaveArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive4'


class FindManySaveArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    
    

class FollowIncludeFromBoard(TypedDict, total=False):
    """Relational arguments for Board"""
    follower: Union[bool, 'UserArgsFromBoardRecursive1']
    following: Union[bool, 'UserArgsFromBoardRecursive1']


class FollowIncludeFromBoardRecursive1(TypedDict, total=False):
    """Relational arguments for Board"""
    follower: Union[bool, 'UserArgsFromBoardRecursive2']
    following: Union[bool, 'UserArgsFromBoardRecursive2']


class FollowIncludeFromBoardRecursive2(TypedDict, total=False):
    """Relational arguments for Board"""
    follower: Union[bool, 'UserArgsFromBoardRecursive3']
    following: Union[bool, 'UserArgsFromBoardRecursive3']


class FollowIncludeFromBoardRecursive3(TypedDict, total=False):
    """Relational arguments for Board"""
    follower: Union[bool, 'UserArgsFromBoardRecursive4']
    following: Union[bool, 'UserArgsFromBoardRecursive4']


class FollowIncludeFromBoardRecursive4(TypedDict, total=False):
    """Relational arguments for Board"""

    

class FollowArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    
    

class FindManyFollowArgsFromBoard(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromBoardRecursive1(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromBoardRecursive2(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromBoardRecursive3(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromBoardRecursive4(TypedDict, total=False):
    """Arguments for Board"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    


FindManyBoardArgs = FindManyBoardArgsFromBoard
FindFirstBoardArgs = FindManyBoardArgsFromBoard


    

class BoardWhereInput(TypedDict, total=False):
    """Board arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isPrivate: Union[_bool, 'types.BooleanFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pins: 'PinListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['BoardWhereInputRecursive1', List['BoardWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['BoardWhereInputRecursive1']
    OR: List['BoardWhereInputRecursive1']
    NOT: List['BoardWhereInputRecursive1']


class BoardWhereInputRecursive1(TypedDict, total=False):
    """Board arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isPrivate: Union[_bool, 'types.BooleanFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pins: 'PinListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['BoardWhereInputRecursive2', List['BoardWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['BoardWhereInputRecursive2']
    OR: List['BoardWhereInputRecursive2']
    NOT: List['BoardWhereInputRecursive2']


class BoardWhereInputRecursive2(TypedDict, total=False):
    """Board arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isPrivate: Union[_bool, 'types.BooleanFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pins: 'PinListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['BoardWhereInputRecursive3', List['BoardWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['BoardWhereInputRecursive3']
    OR: List['BoardWhereInputRecursive3']
    NOT: List['BoardWhereInputRecursive3']


class BoardWhereInputRecursive3(TypedDict, total=False):
    """Board arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isPrivate: Union[_bool, 'types.BooleanFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pins: 'PinListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['BoardWhereInputRecursive4', List['BoardWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['BoardWhereInputRecursive4']
    OR: List['BoardWhereInputRecursive4']
    NOT: List['BoardWhereInputRecursive4']


class BoardWhereInputRecursive4(TypedDict, total=False):
    """Board arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isPrivate: Union[_bool, 'types.BooleanFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pins: 'PinListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Board types


    

class BoardScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Board arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isPrivate: Union[_bool, 'types.BooleanWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BoardScalarWhereWithAggregatesInputRecursive1']
    OR: List['BoardScalarWhereWithAggregatesInputRecursive1']
    NOT: List['BoardScalarWhereWithAggregatesInputRecursive1']


class BoardScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Board arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isPrivate: Union[_bool, 'types.BooleanWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BoardScalarWhereWithAggregatesInputRecursive2']
    OR: List['BoardScalarWhereWithAggregatesInputRecursive2']
    NOT: List['BoardScalarWhereWithAggregatesInputRecursive2']


class BoardScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Board arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isPrivate: Union[_bool, 'types.BooleanWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BoardScalarWhereWithAggregatesInputRecursive3']
    OR: List['BoardScalarWhereWithAggregatesInputRecursive3']
    NOT: List['BoardScalarWhereWithAggregatesInputRecursive3']


class BoardScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Board arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isPrivate: Union[_bool, 'types.BooleanWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BoardScalarWhereWithAggregatesInputRecursive4']
    OR: List['BoardScalarWhereWithAggregatesInputRecursive4']
    NOT: List['BoardScalarWhereWithAggregatesInputRecursive4']


class BoardScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Board arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isPrivate: Union[_bool, 'types.BooleanWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class BoardGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    description: _str
    isPrivate: _bool
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'BoardSumAggregateOutput'
    _avg: 'BoardAvgAggregateOutput'
    _min: 'BoardMinAggregateOutput'
    _max: 'BoardMaxAggregateOutput'
    _count: 'BoardCountAggregateOutput'


class BoardAvgAggregateOutput(TypedDict, total=False):
    """Board output for aggregating averages"""


class BoardSumAggregateOutput(TypedDict, total=False):
    """Board output for aggregating sums"""


class BoardScalarAggregateOutput(TypedDict, total=False):
    """Board output including scalar fields"""
    id: _str
    title: _str
    description: _str
    isPrivate: _bool
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


BoardMinAggregateOutput = BoardScalarAggregateOutput
BoardMaxAggregateOutput = BoardScalarAggregateOutput


class BoardMaxAggregateInput(TypedDict, total=False):
    """Board input for aggregating by max"""
    id: bool
    title: bool
    description: bool
    isPrivate: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class BoardMinAggregateInput(TypedDict, total=False):
    """Board input for aggregating by min"""
    id: bool
    title: bool
    description: bool
    isPrivate: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class BoardNumberAggregateInput(TypedDict, total=False):
    """Board input for aggregating numbers"""


BoardAvgAggregateInput = BoardNumberAggregateInput
BoardSumAggregateInput = BoardNumberAggregateInput


BoardCountAggregateInput = TypedDict(
    'BoardCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'description': bool,
        'isPrivate': bool,
        'userId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

BoardCountAggregateOutput = TypedDict(
    'BoardCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'description': int,
        'isPrivate': int,
        'userId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


BoardKeys = Literal[
    'id',
    'title',
    'description',
    'isPrivate',
    'userId',
    'user',
    'pins',
    'createdAt',
    'updatedAt',
]
BoardScalarFieldKeys = Literal[
    'id',
    'title',
    'description',
    'isPrivate',
    'userId',
    'createdAt',
    'updatedAt',
]
BoardScalarFieldKeysT = TypeVar('BoardScalarFieldKeysT', bound=BoardScalarFieldKeys)

BoardRelationalFieldKeys = Literal[
        'user',
        'pins',
    ]

# Pin types

class PinOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Pin create method"""
    id: _str
    description: Optional[_str]
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    boardId: Optional[_str]
    board: 'BoardCreateNestedWithoutRelationsInput'
    comments: 'CommentCreateManyNestedWithoutRelationsInput'
    likes: 'LikeCreateManyNestedWithoutRelationsInput'
    saves: 'SaveCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PinCreateInput(PinOptionalCreateInput):
    """Required arguments to the Pin create method"""
    title: _str
    imageUrl: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PinOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Pin create method, without relations"""
    id: _str
    description: Optional[_str]
    userId: _str
    boardId: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PinCreateWithoutRelationsInput(PinOptionalCreateWithoutRelationsInput):
    """Required arguments to the Pin create method, without relations"""
    title: _str
    imageUrl: _str

class PinConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PinCreateWithoutRelationsInput'
    where: 'PinWhereUniqueInput'

class PinCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PinCreateWithoutRelationsInput'
    connect: 'PinWhereUniqueInput'
    connect_or_create: 'PinConnectOrCreateWithoutRelationsInput'


class PinCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PinCreateWithoutRelationsInput', List['PinCreateWithoutRelationsInput']]
    connect: Union['PinWhereUniqueInput', List['PinWhereUniqueInput']]
    connect_or_create: Union['PinConnectOrCreateWithoutRelationsInput', List['PinConnectOrCreateWithoutRelationsInput']]

_PinWhereUnique_id_Input = TypedDict(
    '_PinWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

PinWhereUniqueInput = _PinWhereUnique_id_Input


class PinUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    description: Optional[_str]
    imageUrl: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    board: 'BoardUpdateOneWithoutRelationsInput'
    comments: 'CommentUpdateManyWithoutRelationsInput'
    likes: 'LikeUpdateManyWithoutRelationsInput'
    saves: 'SaveUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PinUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    description: Optional[_str]
    imageUrl: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PinUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PinCreateWithoutRelationsInput']
    connect: List['PinWhereUniqueInput']
    connect_or_create: List['PinConnectOrCreateWithoutRelationsInput']
    set: List['PinWhereUniqueInput']
    disconnect: List['PinWhereUniqueInput']
    delete: List['PinWhereUniqueInput']

    # TODO
    # update: List['PinUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PinUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PinScalarWhereInput']
    # upsert: List['PinUpserteWithWhereUniqueWithoutRelationsInput']


class PinUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PinCreateWithoutRelationsInput'
    connect: 'PinWhereUniqueInput'
    connect_or_create: 'PinConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PinUpdateInput'
    # upsert: 'PinUpsertWithoutRelationsInput'


class PinUpsertInput(TypedDict):
    create: 'PinCreateInput'
    update: 'PinUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Pin_id_OrderByInput = TypedDict(
    '_Pin_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Pin_title_OrderByInput = TypedDict(
    '_Pin_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Pin_description_OrderByInput = TypedDict(
    '_Pin_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Pin_imageUrl_OrderByInput = TypedDict(
    '_Pin_imageUrl_OrderByInput',
    {
        'imageUrl': 'SortOrder',
    },
    total=True
)

_Pin_userId_OrderByInput = TypedDict(
    '_Pin_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Pin_boardId_OrderByInput = TypedDict(
    '_Pin_boardId_OrderByInput',
    {
        'boardId': 'SortOrder',
    },
    total=True
)

_Pin_createdAt_OrderByInput = TypedDict(
    '_Pin_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Pin_updatedAt_OrderByInput = TypedDict(
    '_Pin_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Pin_RelevanceInner = TypedDict(
    '_Pin_RelevanceInner',
    {
        'fields': 'List[PinScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Pin_RelevanceOrderByInput = TypedDict(
    '_Pin_RelevanceOrderByInput',
    {
        '_relevance': '_Pin_RelevanceInner',
    },
    total=True
)

PinOrderByInput = Union[
    '_Pin_id_OrderByInput',
    '_Pin_title_OrderByInput',
    '_Pin_description_OrderByInput',
    '_Pin_imageUrl_OrderByInput',
    '_Pin_userId_OrderByInput',
    '_Pin_boardId_OrderByInput',
    '_Pin_createdAt_OrderByInput',
    '_Pin_updatedAt_OrderByInput',
    '_Pin_RelevanceOrderByInput',
]



# recursive Pin types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PinRelationFilter = TypedDict(
    'PinRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PinListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PinInclude(TypedDict, total=False):
    """Pin relational arguments"""
    user: Union[bool, 'UserArgsFromPin']
    board: Union[bool, 'BoardArgsFromPin']
    comments: Union[bool, 'FindManyCommentArgsFromPin']
    likes: Union[bool, 'FindManyLikeArgsFromPin']
    saves: Union[bool, 'FindManySaveArgsFromPin']


    

class UserIncludeFromPin(TypedDict, total=False):
    """Relational arguments for Pin"""
    accounts: Union[bool, 'FindManyAccountArgsFromPinRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromPinRecursive1']
    boards: Union[bool, 'FindManyBoardArgsFromPinRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromPinRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromPinRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromPinRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromPinRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromPinRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromPinRecursive1']


class UserIncludeFromPinRecursive1(TypedDict, total=False):
    """Relational arguments for Pin"""
    accounts: Union[bool, 'FindManyAccountArgsFromPinRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromPinRecursive2']
    boards: Union[bool, 'FindManyBoardArgsFromPinRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromPinRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromPinRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromPinRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromPinRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromPinRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromPinRecursive2']


class UserIncludeFromPinRecursive2(TypedDict, total=False):
    """Relational arguments for Pin"""
    accounts: Union[bool, 'FindManyAccountArgsFromPinRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromPinRecursive3']
    boards: Union[bool, 'FindManyBoardArgsFromPinRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromPinRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromPinRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromPinRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromPinRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromPinRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromPinRecursive3']


class UserIncludeFromPinRecursive3(TypedDict, total=False):
    """Relational arguments for Pin"""
    accounts: Union[bool, 'FindManyAccountArgsFromPinRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromPinRecursive4']
    boards: Union[bool, 'FindManyBoardArgsFromPinRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromPinRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromPinRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromPinRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromPinRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromPinRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromPinRecursive4']


class UserIncludeFromPinRecursive4(TypedDict, total=False):
    """Relational arguments for Pin"""

    

class UserArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    
    

class FindManyUserArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromPin(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive1']


class AccountIncludeFromPinRecursive1(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive2']


class AccountIncludeFromPinRecursive2(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive3']


class AccountIncludeFromPinRecursive3(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive4']


class AccountIncludeFromPinRecursive4(TypedDict, total=False):
    """Relational arguments for Pin"""

    

class AccountArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    
    

class FindManyAccountArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromPin(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive1']


class SessionIncludeFromPinRecursive1(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive2']


class SessionIncludeFromPinRecursive2(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive3']


class SessionIncludeFromPinRecursive3(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive4']


class SessionIncludeFromPinRecursive4(TypedDict, total=False):
    """Relational arguments for Pin"""

    

class SessionArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    
    

class FindManySessionArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class BoardIncludeFromPin(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromPinRecursive1']


class BoardIncludeFromPinRecursive1(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromPinRecursive2']


class BoardIncludeFromPinRecursive2(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromPinRecursive3']


class BoardIncludeFromPinRecursive3(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromPinRecursive4']


class BoardIncludeFromPinRecursive4(TypedDict, total=False):
    """Relational arguments for Pin"""

    

class BoardArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'BoardIncludeFromBoardRecursive1'


class BoardArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'BoardIncludeFromBoardRecursive2'


class BoardArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'BoardIncludeFromBoardRecursive3'


class BoardArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'BoardIncludeFromBoardRecursive4'


class BoardArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    
    

class FindManyBoardArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive1'


class FindManyBoardArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive2'


class FindManyBoardArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive3'


class FindManyBoardArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive4'


class FindManyBoardArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    
    

class PinIncludeFromPin(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive1']
    board: Union[bool, 'BoardArgsFromPinRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromPinRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromPinRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromPinRecursive1']


class PinIncludeFromPinRecursive1(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive2']
    board: Union[bool, 'BoardArgsFromPinRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromPinRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromPinRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromPinRecursive2']


class PinIncludeFromPinRecursive2(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive3']
    board: Union[bool, 'BoardArgsFromPinRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromPinRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromPinRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromPinRecursive3']


class PinIncludeFromPinRecursive3(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive4']
    board: Union[bool, 'BoardArgsFromPinRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromPinRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromPinRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromPinRecursive4']


class PinIncludeFromPinRecursive4(TypedDict, total=False):
    """Relational arguments for Pin"""

    

class PinArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'PinIncludeFromPinRecursive1'


class PinArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'PinIncludeFromPinRecursive2'


class PinArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'PinIncludeFromPinRecursive3'


class PinArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'PinIncludeFromPinRecursive4'


class PinArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    
    

class FindManyPinArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive1'


class FindManyPinArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive2'


class FindManyPinArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive3'


class FindManyPinArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive4'


class FindManyPinArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    
    

class CommentIncludeFromPin(TypedDict, total=False):
    """Relational arguments for Pin"""
    pin: Union[bool, 'PinArgsFromPinRecursive1']
    user: Union[bool, 'UserArgsFromPinRecursive1']


class CommentIncludeFromPinRecursive1(TypedDict, total=False):
    """Relational arguments for Pin"""
    pin: Union[bool, 'PinArgsFromPinRecursive2']
    user: Union[bool, 'UserArgsFromPinRecursive2']


class CommentIncludeFromPinRecursive2(TypedDict, total=False):
    """Relational arguments for Pin"""
    pin: Union[bool, 'PinArgsFromPinRecursive3']
    user: Union[bool, 'UserArgsFromPinRecursive3']


class CommentIncludeFromPinRecursive3(TypedDict, total=False):
    """Relational arguments for Pin"""
    pin: Union[bool, 'PinArgsFromPinRecursive4']
    user: Union[bool, 'UserArgsFromPinRecursive4']


class CommentIncludeFromPinRecursive4(TypedDict, total=False):
    """Relational arguments for Pin"""

    

class CommentArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    
    

class FindManyCommentArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromPin(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive1']
    pin: Union[bool, 'PinArgsFromPinRecursive1']


class LikeIncludeFromPinRecursive1(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive2']
    pin: Union[bool, 'PinArgsFromPinRecursive2']


class LikeIncludeFromPinRecursive2(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive3']
    pin: Union[bool, 'PinArgsFromPinRecursive3']


class LikeIncludeFromPinRecursive3(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive4']
    pin: Union[bool, 'PinArgsFromPinRecursive4']


class LikeIncludeFromPinRecursive4(TypedDict, total=False):
    """Relational arguments for Pin"""

    

class LikeArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    
    

class FindManyLikeArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class SaveIncludeFromPin(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive1']
    pin: Union[bool, 'PinArgsFromPinRecursive1']


class SaveIncludeFromPinRecursive1(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive2']
    pin: Union[bool, 'PinArgsFromPinRecursive2']


class SaveIncludeFromPinRecursive2(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive3']
    pin: Union[bool, 'PinArgsFromPinRecursive3']


class SaveIncludeFromPinRecursive3(TypedDict, total=False):
    """Relational arguments for Pin"""
    user: Union[bool, 'UserArgsFromPinRecursive4']
    pin: Union[bool, 'PinArgsFromPinRecursive4']


class SaveIncludeFromPinRecursive4(TypedDict, total=False):
    """Relational arguments for Pin"""

    

class SaveArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'SaveIncludeFromSaveRecursive1'


class SaveArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'SaveIncludeFromSaveRecursive2'


class SaveArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'SaveIncludeFromSaveRecursive3'


class SaveArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'SaveIncludeFromSaveRecursive4'


class SaveArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    
    

class FindManySaveArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive1'


class FindManySaveArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive2'


class FindManySaveArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive3'


class FindManySaveArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive4'


class FindManySaveArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    
    

class FollowIncludeFromPin(TypedDict, total=False):
    """Relational arguments for Pin"""
    follower: Union[bool, 'UserArgsFromPinRecursive1']
    following: Union[bool, 'UserArgsFromPinRecursive1']


class FollowIncludeFromPinRecursive1(TypedDict, total=False):
    """Relational arguments for Pin"""
    follower: Union[bool, 'UserArgsFromPinRecursive2']
    following: Union[bool, 'UserArgsFromPinRecursive2']


class FollowIncludeFromPinRecursive2(TypedDict, total=False):
    """Relational arguments for Pin"""
    follower: Union[bool, 'UserArgsFromPinRecursive3']
    following: Union[bool, 'UserArgsFromPinRecursive3']


class FollowIncludeFromPinRecursive3(TypedDict, total=False):
    """Relational arguments for Pin"""
    follower: Union[bool, 'UserArgsFromPinRecursive4']
    following: Union[bool, 'UserArgsFromPinRecursive4']


class FollowIncludeFromPinRecursive4(TypedDict, total=False):
    """Relational arguments for Pin"""

    

class FollowArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    
    

class FindManyFollowArgsFromPin(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromPinRecursive1(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromPinRecursive2(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromPinRecursive3(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromPinRecursive4(TypedDict, total=False):
    """Arguments for Pin"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    


FindManyPinArgs = FindManyPinArgsFromPin
FindFirstPinArgs = FindManyPinArgsFromPin


    

class PinWhereInput(TypedDict, total=False):
    """Pin arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    imageUrl: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    boardId: Union[None, _str, 'types.StringFilter']
    board: 'BoardRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    saves: 'SaveListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PinWhereInputRecursive1', List['PinWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PinWhereInputRecursive1']
    OR: List['PinWhereInputRecursive1']
    NOT: List['PinWhereInputRecursive1']


class PinWhereInputRecursive1(TypedDict, total=False):
    """Pin arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    imageUrl: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    boardId: Union[None, _str, 'types.StringFilter']
    board: 'BoardRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    saves: 'SaveListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PinWhereInputRecursive2', List['PinWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PinWhereInputRecursive2']
    OR: List['PinWhereInputRecursive2']
    NOT: List['PinWhereInputRecursive2']


class PinWhereInputRecursive2(TypedDict, total=False):
    """Pin arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    imageUrl: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    boardId: Union[None, _str, 'types.StringFilter']
    board: 'BoardRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    saves: 'SaveListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PinWhereInputRecursive3', List['PinWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PinWhereInputRecursive3']
    OR: List['PinWhereInputRecursive3']
    NOT: List['PinWhereInputRecursive3']


class PinWhereInputRecursive3(TypedDict, total=False):
    """Pin arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    imageUrl: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    boardId: Union[None, _str, 'types.StringFilter']
    board: 'BoardRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    saves: 'SaveListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PinWhereInputRecursive4', List['PinWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PinWhereInputRecursive4']
    OR: List['PinWhereInputRecursive4']
    NOT: List['PinWhereInputRecursive4']


class PinWhereInputRecursive4(TypedDict, total=False):
    """Pin arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    imageUrl: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    boardId: Union[None, _str, 'types.StringFilter']
    board: 'BoardRelationFilter'
    comments: 'CommentListRelationFilter'
    likes: 'LikeListRelationFilter'
    saves: 'SaveListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Pin types


    

class PinScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Pin arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    imageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    boardId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PinScalarWhereWithAggregatesInputRecursive1']
    OR: List['PinScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PinScalarWhereWithAggregatesInputRecursive1']


class PinScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Pin arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    imageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    boardId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PinScalarWhereWithAggregatesInputRecursive2']
    OR: List['PinScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PinScalarWhereWithAggregatesInputRecursive2']


class PinScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Pin arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    imageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    boardId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PinScalarWhereWithAggregatesInputRecursive3']
    OR: List['PinScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PinScalarWhereWithAggregatesInputRecursive3']


class PinScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Pin arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    imageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    boardId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PinScalarWhereWithAggregatesInputRecursive4']
    OR: List['PinScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PinScalarWhereWithAggregatesInputRecursive4']


class PinScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Pin arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    imageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    boardId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class PinGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    description: _str
    imageUrl: _str
    userId: _str
    boardId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PinSumAggregateOutput'
    _avg: 'PinAvgAggregateOutput'
    _min: 'PinMinAggregateOutput'
    _max: 'PinMaxAggregateOutput'
    _count: 'PinCountAggregateOutput'


class PinAvgAggregateOutput(TypedDict, total=False):
    """Pin output for aggregating averages"""


class PinSumAggregateOutput(TypedDict, total=False):
    """Pin output for aggregating sums"""


class PinScalarAggregateOutput(TypedDict, total=False):
    """Pin output including scalar fields"""
    id: _str
    title: _str
    description: _str
    imageUrl: _str
    userId: _str
    boardId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PinMinAggregateOutput = PinScalarAggregateOutput
PinMaxAggregateOutput = PinScalarAggregateOutput


class PinMaxAggregateInput(TypedDict, total=False):
    """Pin input for aggregating by max"""
    id: bool
    title: bool
    description: bool
    imageUrl: bool
    userId: bool
    boardId: bool
    createdAt: bool
    updatedAt: bool


class PinMinAggregateInput(TypedDict, total=False):
    """Pin input for aggregating by min"""
    id: bool
    title: bool
    description: bool
    imageUrl: bool
    userId: bool
    boardId: bool
    createdAt: bool
    updatedAt: bool


class PinNumberAggregateInput(TypedDict, total=False):
    """Pin input for aggregating numbers"""


PinAvgAggregateInput = PinNumberAggregateInput
PinSumAggregateInput = PinNumberAggregateInput


PinCountAggregateInput = TypedDict(
    'PinCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'description': bool,
        'imageUrl': bool,
        'userId': bool,
        'boardId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PinCountAggregateOutput = TypedDict(
    'PinCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'description': int,
        'imageUrl': int,
        'userId': int,
        'boardId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PinKeys = Literal[
    'id',
    'title',
    'description',
    'imageUrl',
    'userId',
    'user',
    'boardId',
    'board',
    'comments',
    'likes',
    'saves',
    'createdAt',
    'updatedAt',
]
PinScalarFieldKeys = Literal[
    'id',
    'title',
    'description',
    'imageUrl',
    'userId',
    'boardId',
    'createdAt',
    'updatedAt',
]
PinScalarFieldKeysT = TypeVar('PinScalarFieldKeysT', bound=PinScalarFieldKeys)

PinRelationalFieldKeys = Literal[
        'user',
        'board',
        'comments',
        'likes',
        'saves',
    ]

# Comment types

class CommentOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Comment create method"""
    id: _str
    pinId: _str
    userId: _str
    pin: 'PinCreateNestedWithoutRelationsInput'
    user: 'UserCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CommentCreateInput(CommentOptionalCreateInput):
    """Required arguments to the Comment create method"""
    text: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CommentOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Comment create method, without relations"""
    id: _str
    pinId: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CommentCreateWithoutRelationsInput(CommentOptionalCreateWithoutRelationsInput):
    """Required arguments to the Comment create method, without relations"""
    text: _str

class CommentConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CommentCreateWithoutRelationsInput'
    where: 'CommentWhereUniqueInput'

class CommentCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CommentCreateWithoutRelationsInput'
    connect: 'CommentWhereUniqueInput'
    connect_or_create: 'CommentConnectOrCreateWithoutRelationsInput'


class CommentCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CommentCreateWithoutRelationsInput', List['CommentCreateWithoutRelationsInput']]
    connect: Union['CommentWhereUniqueInput', List['CommentWhereUniqueInput']]
    connect_or_create: Union['CommentConnectOrCreateWithoutRelationsInput', List['CommentConnectOrCreateWithoutRelationsInput']]

_CommentWhereUnique_id_Input = TypedDict(
    '_CommentWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

CommentWhereUniqueInput = _CommentWhereUnique_id_Input


class CommentUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    text: _str
    pin: 'PinUpdateOneWithoutRelationsInput'
    user: 'UserUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CommentUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    text: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class CommentUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CommentCreateWithoutRelationsInput']
    connect: List['CommentWhereUniqueInput']
    connect_or_create: List['CommentConnectOrCreateWithoutRelationsInput']
    set: List['CommentWhereUniqueInput']
    disconnect: List['CommentWhereUniqueInput']
    delete: List['CommentWhereUniqueInput']

    # TODO
    # update: List['CommentUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CommentUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CommentScalarWhereInput']
    # upsert: List['CommentUpserteWithWhereUniqueWithoutRelationsInput']


class CommentUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CommentCreateWithoutRelationsInput'
    connect: 'CommentWhereUniqueInput'
    connect_or_create: 'CommentConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CommentUpdateInput'
    # upsert: 'CommentUpsertWithoutRelationsInput'


class CommentUpsertInput(TypedDict):
    create: 'CommentCreateInput'
    update: 'CommentUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Comment_id_OrderByInput = TypedDict(
    '_Comment_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Comment_text_OrderByInput = TypedDict(
    '_Comment_text_OrderByInput',
    {
        'text': 'SortOrder',
    },
    total=True
)

_Comment_pinId_OrderByInput = TypedDict(
    '_Comment_pinId_OrderByInput',
    {
        'pinId': 'SortOrder',
    },
    total=True
)

_Comment_userId_OrderByInput = TypedDict(
    '_Comment_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Comment_createdAt_OrderByInput = TypedDict(
    '_Comment_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Comment_updatedAt_OrderByInput = TypedDict(
    '_Comment_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Comment_RelevanceInner = TypedDict(
    '_Comment_RelevanceInner',
    {
        'fields': 'List[CommentScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Comment_RelevanceOrderByInput = TypedDict(
    '_Comment_RelevanceOrderByInput',
    {
        '_relevance': '_Comment_RelevanceInner',
    },
    total=True
)

CommentOrderByInput = Union[
    '_Comment_id_OrderByInput',
    '_Comment_text_OrderByInput',
    '_Comment_pinId_OrderByInput',
    '_Comment_userId_OrderByInput',
    '_Comment_createdAt_OrderByInput',
    '_Comment_updatedAt_OrderByInput',
    '_Comment_RelevanceOrderByInput',
]



# recursive Comment types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CommentRelationFilter = TypedDict(
    'CommentRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CommentListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CommentInclude(TypedDict, total=False):
    """Comment relational arguments"""
    pin: Union[bool, 'PinArgsFromComment']
    user: Union[bool, 'UserArgsFromComment']


    

class UserIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    accounts: Union[bool, 'FindManyAccountArgsFromCommentRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromCommentRecursive1']
    boards: Union[bool, 'FindManyBoardArgsFromCommentRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromCommentRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromCommentRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromCommentRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromCommentRecursive1']


class UserIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    accounts: Union[bool, 'FindManyAccountArgsFromCommentRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromCommentRecursive2']
    boards: Union[bool, 'FindManyBoardArgsFromCommentRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromCommentRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromCommentRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromCommentRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromCommentRecursive2']


class UserIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    accounts: Union[bool, 'FindManyAccountArgsFromCommentRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromCommentRecursive3']
    boards: Union[bool, 'FindManyBoardArgsFromCommentRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromCommentRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromCommentRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromCommentRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromCommentRecursive3']


class UserIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    accounts: Union[bool, 'FindManyAccountArgsFromCommentRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromCommentRecursive4']
    boards: Union[bool, 'FindManyBoardArgsFromCommentRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromCommentRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromCommentRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromCommentRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromCommentRecursive4']


class UserIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class UserArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManyUserArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive1']


class AccountIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive2']


class AccountIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive3']


class AccountIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive4']


class AccountIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class AccountArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManyAccountArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive1']


class SessionIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive2']


class SessionIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive3']


class SessionIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive4']


class SessionIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class SessionArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManySessionArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class BoardIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromCommentRecursive1']


class BoardIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromCommentRecursive2']


class BoardIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromCommentRecursive3']


class BoardIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromCommentRecursive4']


class BoardIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class BoardArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'BoardIncludeFromBoardRecursive1'


class BoardArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'BoardIncludeFromBoardRecursive2'


class BoardArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'BoardIncludeFromBoardRecursive3'


class BoardArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'BoardIncludeFromBoardRecursive4'


class BoardArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManyBoardArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive1'


class FindManyBoardArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive2'


class FindManyBoardArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive3'


class FindManyBoardArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive4'


class FindManyBoardArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    
    

class PinIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive1']
    board: Union[bool, 'BoardArgsFromCommentRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromCommentRecursive1']


class PinIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive2']
    board: Union[bool, 'BoardArgsFromCommentRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromCommentRecursive2']


class PinIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive3']
    board: Union[bool, 'BoardArgsFromCommentRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromCommentRecursive3']


class PinIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive4']
    board: Union[bool, 'BoardArgsFromCommentRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromCommentRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromCommentRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromCommentRecursive4']


class PinIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class PinArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'PinIncludeFromPinRecursive1'


class PinArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'PinIncludeFromPinRecursive2'


class PinArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'PinIncludeFromPinRecursive3'


class PinArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'PinIncludeFromPinRecursive4'


class PinArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManyPinArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive1'


class FindManyPinArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive2'


class FindManyPinArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive3'


class FindManyPinArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive4'


class FindManyPinArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    
    

class CommentIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    pin: Union[bool, 'PinArgsFromCommentRecursive1']
    user: Union[bool, 'UserArgsFromCommentRecursive1']


class CommentIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    pin: Union[bool, 'PinArgsFromCommentRecursive2']
    user: Union[bool, 'UserArgsFromCommentRecursive2']


class CommentIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    pin: Union[bool, 'PinArgsFromCommentRecursive3']
    user: Union[bool, 'UserArgsFromCommentRecursive3']


class CommentIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    pin: Union[bool, 'PinArgsFromCommentRecursive4']
    user: Union[bool, 'UserArgsFromCommentRecursive4']


class CommentIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class CommentArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManyCommentArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive1']
    pin: Union[bool, 'PinArgsFromCommentRecursive1']


class LikeIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive2']
    pin: Union[bool, 'PinArgsFromCommentRecursive2']


class LikeIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive3']
    pin: Union[bool, 'PinArgsFromCommentRecursive3']


class LikeIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive4']
    pin: Union[bool, 'PinArgsFromCommentRecursive4']


class LikeIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class LikeArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManyLikeArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class SaveIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive1']
    pin: Union[bool, 'PinArgsFromCommentRecursive1']


class SaveIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive2']
    pin: Union[bool, 'PinArgsFromCommentRecursive2']


class SaveIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive3']
    pin: Union[bool, 'PinArgsFromCommentRecursive3']


class SaveIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    user: Union[bool, 'UserArgsFromCommentRecursive4']
    pin: Union[bool, 'PinArgsFromCommentRecursive4']


class SaveIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class SaveArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'SaveIncludeFromSaveRecursive1'


class SaveArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'SaveIncludeFromSaveRecursive2'


class SaveArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'SaveIncludeFromSaveRecursive3'


class SaveArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'SaveIncludeFromSaveRecursive4'


class SaveArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManySaveArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive1'


class FindManySaveArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive2'


class FindManySaveArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive3'


class FindManySaveArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive4'


class FindManySaveArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    
    

class FollowIncludeFromComment(TypedDict, total=False):
    """Relational arguments for Comment"""
    follower: Union[bool, 'UserArgsFromCommentRecursive1']
    following: Union[bool, 'UserArgsFromCommentRecursive1']


class FollowIncludeFromCommentRecursive1(TypedDict, total=False):
    """Relational arguments for Comment"""
    follower: Union[bool, 'UserArgsFromCommentRecursive2']
    following: Union[bool, 'UserArgsFromCommentRecursive2']


class FollowIncludeFromCommentRecursive2(TypedDict, total=False):
    """Relational arguments for Comment"""
    follower: Union[bool, 'UserArgsFromCommentRecursive3']
    following: Union[bool, 'UserArgsFromCommentRecursive3']


class FollowIncludeFromCommentRecursive3(TypedDict, total=False):
    """Relational arguments for Comment"""
    follower: Union[bool, 'UserArgsFromCommentRecursive4']
    following: Union[bool, 'UserArgsFromCommentRecursive4']


class FollowIncludeFromCommentRecursive4(TypedDict, total=False):
    """Relational arguments for Comment"""

    

class FollowArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    
    

class FindManyFollowArgsFromComment(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromCommentRecursive1(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromCommentRecursive2(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromCommentRecursive3(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromCommentRecursive4(TypedDict, total=False):
    """Arguments for Comment"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    


FindManyCommentArgs = FindManyCommentArgsFromComment
FindFirstCommentArgs = FindManyCommentArgsFromComment


    

class CommentWhereInput(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pin: 'PinRelationFilter'
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['CommentWhereInputRecursive1', List['CommentWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CommentWhereInputRecursive1']
    OR: List['CommentWhereInputRecursive1']
    NOT: List['CommentWhereInputRecursive1']


class CommentWhereInputRecursive1(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pin: 'PinRelationFilter'
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['CommentWhereInputRecursive2', List['CommentWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CommentWhereInputRecursive2']
    OR: List['CommentWhereInputRecursive2']
    NOT: List['CommentWhereInputRecursive2']


class CommentWhereInputRecursive2(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pin: 'PinRelationFilter'
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['CommentWhereInputRecursive3', List['CommentWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CommentWhereInputRecursive3']
    OR: List['CommentWhereInputRecursive3']
    NOT: List['CommentWhereInputRecursive3']


class CommentWhereInputRecursive3(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pin: 'PinRelationFilter'
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['CommentWhereInputRecursive4', List['CommentWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CommentWhereInputRecursive4']
    OR: List['CommentWhereInputRecursive4']
    NOT: List['CommentWhereInputRecursive4']


class CommentWhereInputRecursive4(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pin: 'PinRelationFilter'
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Comment types


    

class CommentScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CommentScalarWhereWithAggregatesInputRecursive1']
    OR: List['CommentScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CommentScalarWhereWithAggregatesInputRecursive1']


class CommentScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CommentScalarWhereWithAggregatesInputRecursive2']
    OR: List['CommentScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CommentScalarWhereWithAggregatesInputRecursive2']


class CommentScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CommentScalarWhereWithAggregatesInputRecursive3']
    OR: List['CommentScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CommentScalarWhereWithAggregatesInputRecursive3']


class CommentScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CommentScalarWhereWithAggregatesInputRecursive4']
    OR: List['CommentScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CommentScalarWhereWithAggregatesInputRecursive4']


class CommentScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Comment arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class CommentGroupByOutput(TypedDict, total=False):
    id: _str
    text: _str
    pinId: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'CommentSumAggregateOutput'
    _avg: 'CommentAvgAggregateOutput'
    _min: 'CommentMinAggregateOutput'
    _max: 'CommentMaxAggregateOutput'
    _count: 'CommentCountAggregateOutput'


class CommentAvgAggregateOutput(TypedDict, total=False):
    """Comment output for aggregating averages"""


class CommentSumAggregateOutput(TypedDict, total=False):
    """Comment output for aggregating sums"""


class CommentScalarAggregateOutput(TypedDict, total=False):
    """Comment output including scalar fields"""
    id: _str
    text: _str
    pinId: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


CommentMinAggregateOutput = CommentScalarAggregateOutput
CommentMaxAggregateOutput = CommentScalarAggregateOutput


class CommentMaxAggregateInput(TypedDict, total=False):
    """Comment input for aggregating by max"""
    id: bool
    text: bool
    pinId: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class CommentMinAggregateInput(TypedDict, total=False):
    """Comment input for aggregating by min"""
    id: bool
    text: bool
    pinId: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class CommentNumberAggregateInput(TypedDict, total=False):
    """Comment input for aggregating numbers"""


CommentAvgAggregateInput = CommentNumberAggregateInput
CommentSumAggregateInput = CommentNumberAggregateInput


CommentCountAggregateInput = TypedDict(
    'CommentCountAggregateInput',
    {
        'id': bool,
        'text': bool,
        'pinId': bool,
        'userId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

CommentCountAggregateOutput = TypedDict(
    'CommentCountAggregateOutput',
    {
        'id': int,
        'text': int,
        'pinId': int,
        'userId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


CommentKeys = Literal[
    'id',
    'text',
    'pinId',
    'userId',
    'pin',
    'user',
    'createdAt',
    'updatedAt',
]
CommentScalarFieldKeys = Literal[
    'id',
    'text',
    'pinId',
    'userId',
    'createdAt',
    'updatedAt',
]
CommentScalarFieldKeysT = TypeVar('CommentScalarFieldKeysT', bound=CommentScalarFieldKeys)

CommentRelationalFieldKeys = Literal[
        'pin',
        'user',
    ]

# Like types

class LikeOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Like create method"""
    id: _str
    userId: _str
    pinId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    pin: 'PinCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime


class LikeCreateInput(LikeOptionalCreateInput):
    """Required arguments to the Like create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class LikeOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Like create method, without relations"""
    id: _str
    userId: _str
    pinId: _str
    createdAt: datetime.datetime


class LikeCreateWithoutRelationsInput(LikeOptionalCreateWithoutRelationsInput):
    """Required arguments to the Like create method, without relations"""

class LikeConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'LikeCreateWithoutRelationsInput'
    where: 'LikeWhereUniqueInput'

class LikeCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'LikeCreateWithoutRelationsInput'
    connect: 'LikeWhereUniqueInput'
    connect_or_create: 'LikeConnectOrCreateWithoutRelationsInput'


class LikeCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['LikeCreateWithoutRelationsInput', List['LikeCreateWithoutRelationsInput']]
    connect: Union['LikeWhereUniqueInput', List['LikeWhereUniqueInput']]
    connect_or_create: Union['LikeConnectOrCreateWithoutRelationsInput', List['LikeConnectOrCreateWithoutRelationsInput']]

_LikeWhereUnique_id_Input = TypedDict(
    '_LikeWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_LikeCompounduserId_pinIdKeyInner = TypedDict(
    '_LikeCompounduserId_pinIdKeyInner',
    {
        'userId': '_str',
        'pinId': '_str',
    },
    total=True
)

_LikeCompounduserId_pinIdKey = TypedDict(
    '_LikeCompounduserId_pinIdKey',
    {
        'userId_pinId': '_LikeCompounduserId_pinIdKeyInner',
    },
    total=True
)

LikeWhereUniqueInput = Union[
    '_LikeWhereUnique_id_Input',
    '_LikeCompounduserId_pinIdKey',
]


class LikeUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    pin: 'PinUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime


class LikeUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    createdAt: datetime.datetime


class LikeUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['LikeCreateWithoutRelationsInput']
    connect: List['LikeWhereUniqueInput']
    connect_or_create: List['LikeConnectOrCreateWithoutRelationsInput']
    set: List['LikeWhereUniqueInput']
    disconnect: List['LikeWhereUniqueInput']
    delete: List['LikeWhereUniqueInput']

    # TODO
    # update: List['LikeUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['LikeUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['LikeScalarWhereInput']
    # upsert: List['LikeUpserteWithWhereUniqueWithoutRelationsInput']


class LikeUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'LikeCreateWithoutRelationsInput'
    connect: 'LikeWhereUniqueInput'
    connect_or_create: 'LikeConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'LikeUpdateInput'
    # upsert: 'LikeUpsertWithoutRelationsInput'


class LikeUpsertInput(TypedDict):
    create: 'LikeCreateInput'
    update: 'LikeUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Like_id_OrderByInput = TypedDict(
    '_Like_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Like_userId_OrderByInput = TypedDict(
    '_Like_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Like_pinId_OrderByInput = TypedDict(
    '_Like_pinId_OrderByInput',
    {
        'pinId': 'SortOrder',
    },
    total=True
)

_Like_createdAt_OrderByInput = TypedDict(
    '_Like_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Like_RelevanceInner = TypedDict(
    '_Like_RelevanceInner',
    {
        'fields': 'List[LikeScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Like_RelevanceOrderByInput = TypedDict(
    '_Like_RelevanceOrderByInput',
    {
        '_relevance': '_Like_RelevanceInner',
    },
    total=True
)

LikeOrderByInput = Union[
    '_Like_id_OrderByInput',
    '_Like_userId_OrderByInput',
    '_Like_pinId_OrderByInput',
    '_Like_createdAt_OrderByInput',
    '_Like_RelevanceOrderByInput',
]



# recursive Like types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

LikeRelationFilter = TypedDict(
    'LikeRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class LikeListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class LikeInclude(TypedDict, total=False):
    """Like relational arguments"""
    user: Union[bool, 'UserArgsFromLike']
    pin: Union[bool, 'PinArgsFromLike']


    

class UserIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    accounts: Union[bool, 'FindManyAccountArgsFromLikeRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromLikeRecursive1']
    boards: Union[bool, 'FindManyBoardArgsFromLikeRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromLikeRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromLikeRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromLikeRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromLikeRecursive1']


class UserIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    accounts: Union[bool, 'FindManyAccountArgsFromLikeRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromLikeRecursive2']
    boards: Union[bool, 'FindManyBoardArgsFromLikeRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromLikeRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromLikeRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromLikeRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromLikeRecursive2']


class UserIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    accounts: Union[bool, 'FindManyAccountArgsFromLikeRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromLikeRecursive3']
    boards: Union[bool, 'FindManyBoardArgsFromLikeRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromLikeRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromLikeRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromLikeRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromLikeRecursive3']


class UserIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    accounts: Union[bool, 'FindManyAccountArgsFromLikeRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromLikeRecursive4']
    boards: Union[bool, 'FindManyBoardArgsFromLikeRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromLikeRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromLikeRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromLikeRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromLikeRecursive4']


class UserIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class UserArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyUserArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive1']


class AccountIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive2']


class AccountIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive3']


class AccountIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive4']


class AccountIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class AccountArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyAccountArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive1']


class SessionIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive2']


class SessionIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive3']


class SessionIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive4']


class SessionIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class SessionArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManySessionArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class BoardIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromLikeRecursive1']


class BoardIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromLikeRecursive2']


class BoardIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromLikeRecursive3']


class BoardIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromLikeRecursive4']


class BoardIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class BoardArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'BoardIncludeFromBoardRecursive1'


class BoardArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'BoardIncludeFromBoardRecursive2'


class BoardArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'BoardIncludeFromBoardRecursive3'


class BoardArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'BoardIncludeFromBoardRecursive4'


class BoardArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyBoardArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive1'


class FindManyBoardArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive2'


class FindManyBoardArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive3'


class FindManyBoardArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive4'


class FindManyBoardArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    
    

class PinIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive1']
    board: Union[bool, 'BoardArgsFromLikeRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromLikeRecursive1']


class PinIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive2']
    board: Union[bool, 'BoardArgsFromLikeRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromLikeRecursive2']


class PinIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive3']
    board: Union[bool, 'BoardArgsFromLikeRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromLikeRecursive3']


class PinIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive4']
    board: Union[bool, 'BoardArgsFromLikeRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromLikeRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromLikeRecursive4']


class PinIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class PinArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'PinIncludeFromPinRecursive1'


class PinArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'PinIncludeFromPinRecursive2'


class PinArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'PinIncludeFromPinRecursive3'


class PinArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'PinIncludeFromPinRecursive4'


class PinArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyPinArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive1'


class FindManyPinArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive2'


class FindManyPinArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive3'


class FindManyPinArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive4'


class FindManyPinArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    
    

class CommentIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    pin: Union[bool, 'PinArgsFromLikeRecursive1']
    user: Union[bool, 'UserArgsFromLikeRecursive1']


class CommentIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    pin: Union[bool, 'PinArgsFromLikeRecursive2']
    user: Union[bool, 'UserArgsFromLikeRecursive2']


class CommentIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    pin: Union[bool, 'PinArgsFromLikeRecursive3']
    user: Union[bool, 'UserArgsFromLikeRecursive3']


class CommentIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    pin: Union[bool, 'PinArgsFromLikeRecursive4']
    user: Union[bool, 'UserArgsFromLikeRecursive4']


class CommentIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class CommentArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyCommentArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive1']
    pin: Union[bool, 'PinArgsFromLikeRecursive1']


class LikeIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive2']
    pin: Union[bool, 'PinArgsFromLikeRecursive2']


class LikeIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive3']
    pin: Union[bool, 'PinArgsFromLikeRecursive3']


class LikeIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive4']
    pin: Union[bool, 'PinArgsFromLikeRecursive4']


class LikeIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class LikeArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyLikeArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class SaveIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive1']
    pin: Union[bool, 'PinArgsFromLikeRecursive1']


class SaveIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive2']
    pin: Union[bool, 'PinArgsFromLikeRecursive2']


class SaveIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive3']
    pin: Union[bool, 'PinArgsFromLikeRecursive3']


class SaveIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive4']
    pin: Union[bool, 'PinArgsFromLikeRecursive4']


class SaveIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class SaveArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SaveIncludeFromSaveRecursive1'


class SaveArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SaveIncludeFromSaveRecursive2'


class SaveArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SaveIncludeFromSaveRecursive3'


class SaveArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SaveIncludeFromSaveRecursive4'


class SaveArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManySaveArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive1'


class FindManySaveArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive2'


class FindManySaveArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive3'


class FindManySaveArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive4'


class FindManySaveArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    
    

class FollowIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    follower: Union[bool, 'UserArgsFromLikeRecursive1']
    following: Union[bool, 'UserArgsFromLikeRecursive1']


class FollowIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    follower: Union[bool, 'UserArgsFromLikeRecursive2']
    following: Union[bool, 'UserArgsFromLikeRecursive2']


class FollowIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    follower: Union[bool, 'UserArgsFromLikeRecursive3']
    following: Union[bool, 'UserArgsFromLikeRecursive3']


class FollowIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    follower: Union[bool, 'UserArgsFromLikeRecursive4']
    following: Union[bool, 'UserArgsFromLikeRecursive4']


class FollowIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class FollowArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyFollowArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    


FindManyLikeArgs = FindManyLikeArgsFromLike
FindFirstLikeArgs = FindManyLikeArgsFromLike


    

class LikeWhereInput(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pin: 'PinRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive1', List['LikeWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive1']
    OR: List['LikeWhereInputRecursive1']
    NOT: List['LikeWhereInputRecursive1']


class LikeWhereInputRecursive1(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pin: 'PinRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive2', List['LikeWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive2']
    OR: List['LikeWhereInputRecursive2']
    NOT: List['LikeWhereInputRecursive2']


class LikeWhereInputRecursive2(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pin: 'PinRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive3', List['LikeWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive3']
    OR: List['LikeWhereInputRecursive3']
    NOT: List['LikeWhereInputRecursive3']


class LikeWhereInputRecursive3(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pin: 'PinRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive4', List['LikeWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive4']
    OR: List['LikeWhereInputRecursive4']
    NOT: List['LikeWhereInputRecursive4']


class LikeWhereInputRecursive4(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pin: 'PinRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Like types


    

class LikeScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive1']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive1']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive1']


class LikeScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive2']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive2']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive2']


class LikeScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive3']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive3']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive3']


class LikeScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive4']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive4']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive4']


class LikeScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class LikeGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    pinId: _str
    createdAt: datetime.datetime
    _sum: 'LikeSumAggregateOutput'
    _avg: 'LikeAvgAggregateOutput'
    _min: 'LikeMinAggregateOutput'
    _max: 'LikeMaxAggregateOutput'
    _count: 'LikeCountAggregateOutput'


class LikeAvgAggregateOutput(TypedDict, total=False):
    """Like output for aggregating averages"""


class LikeSumAggregateOutput(TypedDict, total=False):
    """Like output for aggregating sums"""


class LikeScalarAggregateOutput(TypedDict, total=False):
    """Like output including scalar fields"""
    id: _str
    userId: _str
    pinId: _str
    createdAt: datetime.datetime


LikeMinAggregateOutput = LikeScalarAggregateOutput
LikeMaxAggregateOutput = LikeScalarAggregateOutput


class LikeMaxAggregateInput(TypedDict, total=False):
    """Like input for aggregating by max"""
    id: bool
    userId: bool
    pinId: bool
    createdAt: bool


class LikeMinAggregateInput(TypedDict, total=False):
    """Like input for aggregating by min"""
    id: bool
    userId: bool
    pinId: bool
    createdAt: bool


class LikeNumberAggregateInput(TypedDict, total=False):
    """Like input for aggregating numbers"""


LikeAvgAggregateInput = LikeNumberAggregateInput
LikeSumAggregateInput = LikeNumberAggregateInput


LikeCountAggregateInput = TypedDict(
    'LikeCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'pinId': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

LikeCountAggregateOutput = TypedDict(
    'LikeCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'pinId': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


LikeKeys = Literal[
    'id',
    'userId',
    'pinId',
    'user',
    'pin',
    'createdAt',
]
LikeScalarFieldKeys = Literal[
    'id',
    'userId',
    'pinId',
    'createdAt',
]
LikeScalarFieldKeysT = TypeVar('LikeScalarFieldKeysT', bound=LikeScalarFieldKeys)

LikeRelationalFieldKeys = Literal[
        'user',
        'pin',
    ]

# Save types

class SaveOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Save create method"""
    id: _str
    userId: _str
    pinId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    pin: 'PinCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime


class SaveCreateInput(SaveOptionalCreateInput):
    """Required arguments to the Save create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SaveOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Save create method, without relations"""
    id: _str
    userId: _str
    pinId: _str
    createdAt: datetime.datetime


class SaveCreateWithoutRelationsInput(SaveOptionalCreateWithoutRelationsInput):
    """Required arguments to the Save create method, without relations"""

class SaveConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SaveCreateWithoutRelationsInput'
    where: 'SaveWhereUniqueInput'

class SaveCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SaveCreateWithoutRelationsInput'
    connect: 'SaveWhereUniqueInput'
    connect_or_create: 'SaveConnectOrCreateWithoutRelationsInput'


class SaveCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SaveCreateWithoutRelationsInput', List['SaveCreateWithoutRelationsInput']]
    connect: Union['SaveWhereUniqueInput', List['SaveWhereUniqueInput']]
    connect_or_create: Union['SaveConnectOrCreateWithoutRelationsInput', List['SaveConnectOrCreateWithoutRelationsInput']]

_SaveWhereUnique_id_Input = TypedDict(
    '_SaveWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_SaveCompounduserId_pinIdKeyInner = TypedDict(
    '_SaveCompounduserId_pinIdKeyInner',
    {
        'userId': '_str',
        'pinId': '_str',
    },
    total=True
)

_SaveCompounduserId_pinIdKey = TypedDict(
    '_SaveCompounduserId_pinIdKey',
    {
        'userId_pinId': '_SaveCompounduserId_pinIdKeyInner',
    },
    total=True
)

SaveWhereUniqueInput = Union[
    '_SaveWhereUnique_id_Input',
    '_SaveCompounduserId_pinIdKey',
]


class SaveUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    pin: 'PinUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime


class SaveUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    createdAt: datetime.datetime


class SaveUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SaveCreateWithoutRelationsInput']
    connect: List['SaveWhereUniqueInput']
    connect_or_create: List['SaveConnectOrCreateWithoutRelationsInput']
    set: List['SaveWhereUniqueInput']
    disconnect: List['SaveWhereUniqueInput']
    delete: List['SaveWhereUniqueInput']

    # TODO
    # update: List['SaveUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SaveUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SaveScalarWhereInput']
    # upsert: List['SaveUpserteWithWhereUniqueWithoutRelationsInput']


class SaveUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SaveCreateWithoutRelationsInput'
    connect: 'SaveWhereUniqueInput'
    connect_or_create: 'SaveConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SaveUpdateInput'
    # upsert: 'SaveUpsertWithoutRelationsInput'


class SaveUpsertInput(TypedDict):
    create: 'SaveCreateInput'
    update: 'SaveUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Save_id_OrderByInput = TypedDict(
    '_Save_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Save_userId_OrderByInput = TypedDict(
    '_Save_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Save_pinId_OrderByInput = TypedDict(
    '_Save_pinId_OrderByInput',
    {
        'pinId': 'SortOrder',
    },
    total=True
)

_Save_createdAt_OrderByInput = TypedDict(
    '_Save_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Save_RelevanceInner = TypedDict(
    '_Save_RelevanceInner',
    {
        'fields': 'List[SaveScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Save_RelevanceOrderByInput = TypedDict(
    '_Save_RelevanceOrderByInput',
    {
        '_relevance': '_Save_RelevanceInner',
    },
    total=True
)

SaveOrderByInput = Union[
    '_Save_id_OrderByInput',
    '_Save_userId_OrderByInput',
    '_Save_pinId_OrderByInput',
    '_Save_createdAt_OrderByInput',
    '_Save_RelevanceOrderByInput',
]



# recursive Save types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SaveRelationFilter = TypedDict(
    'SaveRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SaveListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SaveInclude(TypedDict, total=False):
    """Save relational arguments"""
    user: Union[bool, 'UserArgsFromSave']
    pin: Union[bool, 'PinArgsFromSave']


    

class UserIncludeFromSave(TypedDict, total=False):
    """Relational arguments for Save"""
    accounts: Union[bool, 'FindManyAccountArgsFromSaveRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromSaveRecursive1']
    boards: Union[bool, 'FindManyBoardArgsFromSaveRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromSaveRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromSaveRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromSaveRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromSaveRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromSaveRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromSaveRecursive1']


class UserIncludeFromSaveRecursive1(TypedDict, total=False):
    """Relational arguments for Save"""
    accounts: Union[bool, 'FindManyAccountArgsFromSaveRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromSaveRecursive2']
    boards: Union[bool, 'FindManyBoardArgsFromSaveRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromSaveRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromSaveRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromSaveRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromSaveRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromSaveRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromSaveRecursive2']


class UserIncludeFromSaveRecursive2(TypedDict, total=False):
    """Relational arguments for Save"""
    accounts: Union[bool, 'FindManyAccountArgsFromSaveRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromSaveRecursive3']
    boards: Union[bool, 'FindManyBoardArgsFromSaveRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromSaveRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromSaveRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromSaveRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromSaveRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromSaveRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromSaveRecursive3']


class UserIncludeFromSaveRecursive3(TypedDict, total=False):
    """Relational arguments for Save"""
    accounts: Union[bool, 'FindManyAccountArgsFromSaveRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromSaveRecursive4']
    boards: Union[bool, 'FindManyBoardArgsFromSaveRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromSaveRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromSaveRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromSaveRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromSaveRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromSaveRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromSaveRecursive4']


class UserIncludeFromSaveRecursive4(TypedDict, total=False):
    """Relational arguments for Save"""

    

class UserArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    
    

class FindManyUserArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromSave(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive1']


class AccountIncludeFromSaveRecursive1(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive2']


class AccountIncludeFromSaveRecursive2(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive3']


class AccountIncludeFromSaveRecursive3(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive4']


class AccountIncludeFromSaveRecursive4(TypedDict, total=False):
    """Relational arguments for Save"""

    

class AccountArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    
    

class FindManyAccountArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromSave(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive1']


class SessionIncludeFromSaveRecursive1(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive2']


class SessionIncludeFromSaveRecursive2(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive3']


class SessionIncludeFromSaveRecursive3(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive4']


class SessionIncludeFromSaveRecursive4(TypedDict, total=False):
    """Relational arguments for Save"""

    

class SessionArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    
    

class FindManySessionArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class BoardIncludeFromSave(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromSaveRecursive1']


class BoardIncludeFromSaveRecursive1(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromSaveRecursive2']


class BoardIncludeFromSaveRecursive2(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromSaveRecursive3']


class BoardIncludeFromSaveRecursive3(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromSaveRecursive4']


class BoardIncludeFromSaveRecursive4(TypedDict, total=False):
    """Relational arguments for Save"""

    

class BoardArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    include: 'BoardIncludeFromBoardRecursive1'


class BoardArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    include: 'BoardIncludeFromBoardRecursive2'


class BoardArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    include: 'BoardIncludeFromBoardRecursive3'


class BoardArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    include: 'BoardIncludeFromBoardRecursive4'


class BoardArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    
    

class FindManyBoardArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive1'


class FindManyBoardArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive2'


class FindManyBoardArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive3'


class FindManyBoardArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive4'


class FindManyBoardArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    
    

class PinIncludeFromSave(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive1']
    board: Union[bool, 'BoardArgsFromSaveRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromSaveRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromSaveRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromSaveRecursive1']


class PinIncludeFromSaveRecursive1(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive2']
    board: Union[bool, 'BoardArgsFromSaveRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromSaveRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromSaveRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromSaveRecursive2']


class PinIncludeFromSaveRecursive2(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive3']
    board: Union[bool, 'BoardArgsFromSaveRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromSaveRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromSaveRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromSaveRecursive3']


class PinIncludeFromSaveRecursive3(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive4']
    board: Union[bool, 'BoardArgsFromSaveRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromSaveRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromSaveRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromSaveRecursive4']


class PinIncludeFromSaveRecursive4(TypedDict, total=False):
    """Relational arguments for Save"""

    

class PinArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    include: 'PinIncludeFromPinRecursive1'


class PinArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    include: 'PinIncludeFromPinRecursive2'


class PinArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    include: 'PinIncludeFromPinRecursive3'


class PinArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    include: 'PinIncludeFromPinRecursive4'


class PinArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    
    

class FindManyPinArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive1'


class FindManyPinArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive2'


class FindManyPinArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive3'


class FindManyPinArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive4'


class FindManyPinArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    
    

class CommentIncludeFromSave(TypedDict, total=False):
    """Relational arguments for Save"""
    pin: Union[bool, 'PinArgsFromSaveRecursive1']
    user: Union[bool, 'UserArgsFromSaveRecursive1']


class CommentIncludeFromSaveRecursive1(TypedDict, total=False):
    """Relational arguments for Save"""
    pin: Union[bool, 'PinArgsFromSaveRecursive2']
    user: Union[bool, 'UserArgsFromSaveRecursive2']


class CommentIncludeFromSaveRecursive2(TypedDict, total=False):
    """Relational arguments for Save"""
    pin: Union[bool, 'PinArgsFromSaveRecursive3']
    user: Union[bool, 'UserArgsFromSaveRecursive3']


class CommentIncludeFromSaveRecursive3(TypedDict, total=False):
    """Relational arguments for Save"""
    pin: Union[bool, 'PinArgsFromSaveRecursive4']
    user: Union[bool, 'UserArgsFromSaveRecursive4']


class CommentIncludeFromSaveRecursive4(TypedDict, total=False):
    """Relational arguments for Save"""

    

class CommentArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    
    

class FindManyCommentArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromSave(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive1']
    pin: Union[bool, 'PinArgsFromSaveRecursive1']


class LikeIncludeFromSaveRecursive1(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive2']
    pin: Union[bool, 'PinArgsFromSaveRecursive2']


class LikeIncludeFromSaveRecursive2(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive3']
    pin: Union[bool, 'PinArgsFromSaveRecursive3']


class LikeIncludeFromSaveRecursive3(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive4']
    pin: Union[bool, 'PinArgsFromSaveRecursive4']


class LikeIncludeFromSaveRecursive4(TypedDict, total=False):
    """Relational arguments for Save"""

    

class LikeArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    
    

class FindManyLikeArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class SaveIncludeFromSave(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive1']
    pin: Union[bool, 'PinArgsFromSaveRecursive1']


class SaveIncludeFromSaveRecursive1(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive2']
    pin: Union[bool, 'PinArgsFromSaveRecursive2']


class SaveIncludeFromSaveRecursive2(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive3']
    pin: Union[bool, 'PinArgsFromSaveRecursive3']


class SaveIncludeFromSaveRecursive3(TypedDict, total=False):
    """Relational arguments for Save"""
    user: Union[bool, 'UserArgsFromSaveRecursive4']
    pin: Union[bool, 'PinArgsFromSaveRecursive4']


class SaveIncludeFromSaveRecursive4(TypedDict, total=False):
    """Relational arguments for Save"""

    

class SaveArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    include: 'SaveIncludeFromSaveRecursive1'


class SaveArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    include: 'SaveIncludeFromSaveRecursive2'


class SaveArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    include: 'SaveIncludeFromSaveRecursive3'


class SaveArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    include: 'SaveIncludeFromSaveRecursive4'


class SaveArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    
    

class FindManySaveArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive1'


class FindManySaveArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive2'


class FindManySaveArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive3'


class FindManySaveArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive4'


class FindManySaveArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    
    

class FollowIncludeFromSave(TypedDict, total=False):
    """Relational arguments for Save"""
    follower: Union[bool, 'UserArgsFromSaveRecursive1']
    following: Union[bool, 'UserArgsFromSaveRecursive1']


class FollowIncludeFromSaveRecursive1(TypedDict, total=False):
    """Relational arguments for Save"""
    follower: Union[bool, 'UserArgsFromSaveRecursive2']
    following: Union[bool, 'UserArgsFromSaveRecursive2']


class FollowIncludeFromSaveRecursive2(TypedDict, total=False):
    """Relational arguments for Save"""
    follower: Union[bool, 'UserArgsFromSaveRecursive3']
    following: Union[bool, 'UserArgsFromSaveRecursive3']


class FollowIncludeFromSaveRecursive3(TypedDict, total=False):
    """Relational arguments for Save"""
    follower: Union[bool, 'UserArgsFromSaveRecursive4']
    following: Union[bool, 'UserArgsFromSaveRecursive4']


class FollowIncludeFromSaveRecursive4(TypedDict, total=False):
    """Relational arguments for Save"""

    

class FollowArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    
    

class FindManyFollowArgsFromSave(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromSaveRecursive1(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromSaveRecursive2(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromSaveRecursive3(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromSaveRecursive4(TypedDict, total=False):
    """Arguments for Save"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    


FindManySaveArgs = FindManySaveArgsFromSave
FindFirstSaveArgs = FindManySaveArgsFromSave


    

class SaveWhereInput(TypedDict, total=False):
    """Save arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pin: 'PinRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SaveWhereInputRecursive1', List['SaveWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SaveWhereInputRecursive1']
    OR: List['SaveWhereInputRecursive1']
    NOT: List['SaveWhereInputRecursive1']


class SaveWhereInputRecursive1(TypedDict, total=False):
    """Save arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pin: 'PinRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SaveWhereInputRecursive2', List['SaveWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SaveWhereInputRecursive2']
    OR: List['SaveWhereInputRecursive2']
    NOT: List['SaveWhereInputRecursive2']


class SaveWhereInputRecursive2(TypedDict, total=False):
    """Save arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pin: 'PinRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SaveWhereInputRecursive3', List['SaveWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SaveWhereInputRecursive3']
    OR: List['SaveWhereInputRecursive3']
    NOT: List['SaveWhereInputRecursive3']


class SaveWhereInputRecursive3(TypedDict, total=False):
    """Save arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pin: 'PinRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SaveWhereInputRecursive4', List['SaveWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SaveWhereInputRecursive4']
    OR: List['SaveWhereInputRecursive4']
    NOT: List['SaveWhereInputRecursive4']


class SaveWhereInputRecursive4(TypedDict, total=False):
    """Save arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    pinId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    pin: 'PinRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Save types


    

class SaveScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Save arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SaveScalarWhereWithAggregatesInputRecursive1']
    OR: List['SaveScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SaveScalarWhereWithAggregatesInputRecursive1']


class SaveScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Save arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SaveScalarWhereWithAggregatesInputRecursive2']
    OR: List['SaveScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SaveScalarWhereWithAggregatesInputRecursive2']


class SaveScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Save arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SaveScalarWhereWithAggregatesInputRecursive3']
    OR: List['SaveScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SaveScalarWhereWithAggregatesInputRecursive3']


class SaveScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Save arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SaveScalarWhereWithAggregatesInputRecursive4']
    OR: List['SaveScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SaveScalarWhereWithAggregatesInputRecursive4']


class SaveScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Save arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    pinId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SaveGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    pinId: _str
    createdAt: datetime.datetime
    _sum: 'SaveSumAggregateOutput'
    _avg: 'SaveAvgAggregateOutput'
    _min: 'SaveMinAggregateOutput'
    _max: 'SaveMaxAggregateOutput'
    _count: 'SaveCountAggregateOutput'


class SaveAvgAggregateOutput(TypedDict, total=False):
    """Save output for aggregating averages"""


class SaveSumAggregateOutput(TypedDict, total=False):
    """Save output for aggregating sums"""


class SaveScalarAggregateOutput(TypedDict, total=False):
    """Save output including scalar fields"""
    id: _str
    userId: _str
    pinId: _str
    createdAt: datetime.datetime


SaveMinAggregateOutput = SaveScalarAggregateOutput
SaveMaxAggregateOutput = SaveScalarAggregateOutput


class SaveMaxAggregateInput(TypedDict, total=False):
    """Save input for aggregating by max"""
    id: bool
    userId: bool
    pinId: bool
    createdAt: bool


class SaveMinAggregateInput(TypedDict, total=False):
    """Save input for aggregating by min"""
    id: bool
    userId: bool
    pinId: bool
    createdAt: bool


class SaveNumberAggregateInput(TypedDict, total=False):
    """Save input for aggregating numbers"""


SaveAvgAggregateInput = SaveNumberAggregateInput
SaveSumAggregateInput = SaveNumberAggregateInput


SaveCountAggregateInput = TypedDict(
    'SaveCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'pinId': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

SaveCountAggregateOutput = TypedDict(
    'SaveCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'pinId': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


SaveKeys = Literal[
    'id',
    'userId',
    'pinId',
    'user',
    'pin',
    'createdAt',
]
SaveScalarFieldKeys = Literal[
    'id',
    'userId',
    'pinId',
    'createdAt',
]
SaveScalarFieldKeysT = TypeVar('SaveScalarFieldKeysT', bound=SaveScalarFieldKeys)

SaveRelationalFieldKeys = Literal[
        'user',
        'pin',
    ]

# Follow types

class FollowOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Follow create method"""
    id: _str
    followerId: _str
    followingId: _str
    follower: 'UserCreateNestedWithoutRelationsInput'
    following: 'UserCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime


class FollowCreateInput(FollowOptionalCreateInput):
    """Required arguments to the Follow create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class FollowOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Follow create method, without relations"""
    id: _str
    followerId: _str
    followingId: _str
    createdAt: datetime.datetime


class FollowCreateWithoutRelationsInput(FollowOptionalCreateWithoutRelationsInput):
    """Required arguments to the Follow create method, without relations"""

class FollowConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'FollowCreateWithoutRelationsInput'
    where: 'FollowWhereUniqueInput'

class FollowCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'FollowCreateWithoutRelationsInput'
    connect: 'FollowWhereUniqueInput'
    connect_or_create: 'FollowConnectOrCreateWithoutRelationsInput'


class FollowCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['FollowCreateWithoutRelationsInput', List['FollowCreateWithoutRelationsInput']]
    connect: Union['FollowWhereUniqueInput', List['FollowWhereUniqueInput']]
    connect_or_create: Union['FollowConnectOrCreateWithoutRelationsInput', List['FollowConnectOrCreateWithoutRelationsInput']]

_FollowWhereUnique_id_Input = TypedDict(
    '_FollowWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_FollowCompoundfollowerId_followingIdKeyInner = TypedDict(
    '_FollowCompoundfollowerId_followingIdKeyInner',
    {
        'followerId': '_str',
        'followingId': '_str',
    },
    total=True
)

_FollowCompoundfollowerId_followingIdKey = TypedDict(
    '_FollowCompoundfollowerId_followingIdKey',
    {
        'followerId_followingId': '_FollowCompoundfollowerId_followingIdKeyInner',
    },
    total=True
)

FollowWhereUniqueInput = Union[
    '_FollowWhereUnique_id_Input',
    '_FollowCompoundfollowerId_followingIdKey',
]


class FollowUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    follower: 'UserUpdateOneWithoutRelationsInput'
    following: 'UserUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime


class FollowUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    createdAt: datetime.datetime


class FollowUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['FollowCreateWithoutRelationsInput']
    connect: List['FollowWhereUniqueInput']
    connect_or_create: List['FollowConnectOrCreateWithoutRelationsInput']
    set: List['FollowWhereUniqueInput']
    disconnect: List['FollowWhereUniqueInput']
    delete: List['FollowWhereUniqueInput']

    # TODO
    # update: List['FollowUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['FollowUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['FollowScalarWhereInput']
    # upsert: List['FollowUpserteWithWhereUniqueWithoutRelationsInput']


class FollowUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'FollowCreateWithoutRelationsInput'
    connect: 'FollowWhereUniqueInput'
    connect_or_create: 'FollowConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'FollowUpdateInput'
    # upsert: 'FollowUpsertWithoutRelationsInput'


class FollowUpsertInput(TypedDict):
    create: 'FollowCreateInput'
    update: 'FollowUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Follow_id_OrderByInput = TypedDict(
    '_Follow_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Follow_followerId_OrderByInput = TypedDict(
    '_Follow_followerId_OrderByInput',
    {
        'followerId': 'SortOrder',
    },
    total=True
)

_Follow_followingId_OrderByInput = TypedDict(
    '_Follow_followingId_OrderByInput',
    {
        'followingId': 'SortOrder',
    },
    total=True
)

_Follow_createdAt_OrderByInput = TypedDict(
    '_Follow_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Follow_RelevanceInner = TypedDict(
    '_Follow_RelevanceInner',
    {
        'fields': 'List[FollowScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Follow_RelevanceOrderByInput = TypedDict(
    '_Follow_RelevanceOrderByInput',
    {
        '_relevance': '_Follow_RelevanceInner',
    },
    total=True
)

FollowOrderByInput = Union[
    '_Follow_id_OrderByInput',
    '_Follow_followerId_OrderByInput',
    '_Follow_followingId_OrderByInput',
    '_Follow_createdAt_OrderByInput',
    '_Follow_RelevanceOrderByInput',
]



# recursive Follow types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

FollowRelationFilter = TypedDict(
    'FollowRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class FollowListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class FollowInclude(TypedDict, total=False):
    """Follow relational arguments"""
    follower: Union[bool, 'UserArgsFromFollow']
    following: Union[bool, 'UserArgsFromFollow']


    

class UserIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    accounts: Union[bool, 'FindManyAccountArgsFromFollowRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromFollowRecursive1']
    boards: Union[bool, 'FindManyBoardArgsFromFollowRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromFollowRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromFollowRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromFollowRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromFollowRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromFollowRecursive1']


class UserIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    accounts: Union[bool, 'FindManyAccountArgsFromFollowRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromFollowRecursive2']
    boards: Union[bool, 'FindManyBoardArgsFromFollowRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromFollowRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromFollowRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromFollowRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromFollowRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromFollowRecursive2']


class UserIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    accounts: Union[bool, 'FindManyAccountArgsFromFollowRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromFollowRecursive3']
    boards: Union[bool, 'FindManyBoardArgsFromFollowRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromFollowRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromFollowRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromFollowRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromFollowRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromFollowRecursive3']


class UserIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    accounts: Union[bool, 'FindManyAccountArgsFromFollowRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromFollowRecursive4']
    boards: Union[bool, 'FindManyBoardArgsFromFollowRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromFollowRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromFollowRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromFollowRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromFollowRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromFollowRecursive4']


class UserIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class UserArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyUserArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive1']


class AccountIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive2']


class AccountIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive3']


class AccountIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive4']


class AccountIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class AccountArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyAccountArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive1']


class SessionIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive2']


class SessionIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive3']


class SessionIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive4']


class SessionIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class SessionArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManySessionArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class BoardIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive1']
    pins: Union[bool, 'FindManyPinArgsFromFollowRecursive1']


class BoardIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive2']
    pins: Union[bool, 'FindManyPinArgsFromFollowRecursive2']


class BoardIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive3']
    pins: Union[bool, 'FindManyPinArgsFromFollowRecursive3']


class BoardIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive4']
    pins: Union[bool, 'FindManyPinArgsFromFollowRecursive4']


class BoardIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class BoardArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'BoardIncludeFromBoardRecursive1'


class BoardArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'BoardIncludeFromBoardRecursive2'


class BoardArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'BoardIncludeFromBoardRecursive3'


class BoardArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'BoardIncludeFromBoardRecursive4'


class BoardArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyBoardArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive1'


class FindManyBoardArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive2'


class FindManyBoardArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive3'


class FindManyBoardArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    include: 'BoardIncludeFromBoardRecursive4'


class FindManyBoardArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['BoardOrderByInput', List['BoardOrderByInput']]
    where: 'BoardWhereInput'
    cursor: 'BoardWhereUniqueInput'
    distinct: List['BoardScalarFieldKeys']
    
    

class PinIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive1']
    board: Union[bool, 'BoardArgsFromFollowRecursive1']
    comments: Union[bool, 'FindManyCommentArgsFromFollowRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive1']
    saves: Union[bool, 'FindManySaveArgsFromFollowRecursive1']


class PinIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive2']
    board: Union[bool, 'BoardArgsFromFollowRecursive2']
    comments: Union[bool, 'FindManyCommentArgsFromFollowRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive2']
    saves: Union[bool, 'FindManySaveArgsFromFollowRecursive2']


class PinIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive3']
    board: Union[bool, 'BoardArgsFromFollowRecursive3']
    comments: Union[bool, 'FindManyCommentArgsFromFollowRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive3']
    saves: Union[bool, 'FindManySaveArgsFromFollowRecursive3']


class PinIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive4']
    board: Union[bool, 'BoardArgsFromFollowRecursive4']
    comments: Union[bool, 'FindManyCommentArgsFromFollowRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive4']
    saves: Union[bool, 'FindManySaveArgsFromFollowRecursive4']


class PinIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class PinArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'PinIncludeFromPinRecursive1'


class PinArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'PinIncludeFromPinRecursive2'


class PinArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'PinIncludeFromPinRecursive3'


class PinArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'PinIncludeFromPinRecursive4'


class PinArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyPinArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive1'


class FindManyPinArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive2'


class FindManyPinArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive3'


class FindManyPinArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    include: 'PinIncludeFromPinRecursive4'


class FindManyPinArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PinOrderByInput', List['PinOrderByInput']]
    where: 'PinWhereInput'
    cursor: 'PinWhereUniqueInput'
    distinct: List['PinScalarFieldKeys']
    
    

class CommentIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    pin: Union[bool, 'PinArgsFromFollowRecursive1']
    user: Union[bool, 'UserArgsFromFollowRecursive1']


class CommentIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    pin: Union[bool, 'PinArgsFromFollowRecursive2']
    user: Union[bool, 'UserArgsFromFollowRecursive2']


class CommentIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    pin: Union[bool, 'PinArgsFromFollowRecursive3']
    user: Union[bool, 'UserArgsFromFollowRecursive3']


class CommentIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    pin: Union[bool, 'PinArgsFromFollowRecursive4']
    user: Union[bool, 'UserArgsFromFollowRecursive4']


class CommentIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class CommentArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'CommentIncludeFromCommentRecursive1'


class CommentArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'CommentIncludeFromCommentRecursive2'


class CommentArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'CommentIncludeFromCommentRecursive3'


class CommentArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'CommentIncludeFromCommentRecursive4'


class CommentArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyCommentArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive1'


class FindManyCommentArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive2'


class FindManyCommentArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive3'


class FindManyCommentArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    include: 'CommentIncludeFromCommentRecursive4'


class FindManyCommentArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['CommentOrderByInput', List['CommentOrderByInput']]
    where: 'CommentWhereInput'
    cursor: 'CommentWhereUniqueInput'
    distinct: List['CommentScalarFieldKeys']
    
    

class LikeIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive1']
    pin: Union[bool, 'PinArgsFromFollowRecursive1']


class LikeIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive2']
    pin: Union[bool, 'PinArgsFromFollowRecursive2']


class LikeIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive3']
    pin: Union[bool, 'PinArgsFromFollowRecursive3']


class LikeIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive4']
    pin: Union[bool, 'PinArgsFromFollowRecursive4']


class LikeIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class LikeArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyLikeArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class SaveIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive1']
    pin: Union[bool, 'PinArgsFromFollowRecursive1']


class SaveIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive2']
    pin: Union[bool, 'PinArgsFromFollowRecursive2']


class SaveIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive3']
    pin: Union[bool, 'PinArgsFromFollowRecursive3']


class SaveIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive4']
    pin: Union[bool, 'PinArgsFromFollowRecursive4']


class SaveIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class SaveArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SaveIncludeFromSaveRecursive1'


class SaveArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SaveIncludeFromSaveRecursive2'


class SaveArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SaveIncludeFromSaveRecursive3'


class SaveArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SaveIncludeFromSaveRecursive4'


class SaveArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManySaveArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive1'


class FindManySaveArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive2'


class FindManySaveArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive3'


class FindManySaveArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    include: 'SaveIncludeFromSaveRecursive4'


class FindManySaveArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SaveOrderByInput', List['SaveOrderByInput']]
    where: 'SaveWhereInput'
    cursor: 'SaveWhereUniqueInput'
    distinct: List['SaveScalarFieldKeys']
    
    

class FollowIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    follower: Union[bool, 'UserArgsFromFollowRecursive1']
    following: Union[bool, 'UserArgsFromFollowRecursive1']


class FollowIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    follower: Union[bool, 'UserArgsFromFollowRecursive2']
    following: Union[bool, 'UserArgsFromFollowRecursive2']


class FollowIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    follower: Union[bool, 'UserArgsFromFollowRecursive3']
    following: Union[bool, 'UserArgsFromFollowRecursive3']


class FollowIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    follower: Union[bool, 'UserArgsFromFollowRecursive4']
    following: Union[bool, 'UserArgsFromFollowRecursive4']


class FollowIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class FollowArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyFollowArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    


FindManyFollowArgs = FindManyFollowArgsFromFollow
FindFirstFollowArgs = FindManyFollowArgsFromFollow


    

class FollowWhereInput(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    followerId: Union[_str, 'types.StringFilter']
    followingId: Union[_str, 'types.StringFilter']
    follower: 'UserRelationFilter'
    following: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FollowWhereInputRecursive1', List['FollowWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['FollowWhereInputRecursive1']
    OR: List['FollowWhereInputRecursive1']
    NOT: List['FollowWhereInputRecursive1']


class FollowWhereInputRecursive1(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    followerId: Union[_str, 'types.StringFilter']
    followingId: Union[_str, 'types.StringFilter']
    follower: 'UserRelationFilter'
    following: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FollowWhereInputRecursive2', List['FollowWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['FollowWhereInputRecursive2']
    OR: List['FollowWhereInputRecursive2']
    NOT: List['FollowWhereInputRecursive2']


class FollowWhereInputRecursive2(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    followerId: Union[_str, 'types.StringFilter']
    followingId: Union[_str, 'types.StringFilter']
    follower: 'UserRelationFilter'
    following: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FollowWhereInputRecursive3', List['FollowWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['FollowWhereInputRecursive3']
    OR: List['FollowWhereInputRecursive3']
    NOT: List['FollowWhereInputRecursive3']


class FollowWhereInputRecursive3(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    followerId: Union[_str, 'types.StringFilter']
    followingId: Union[_str, 'types.StringFilter']
    follower: 'UserRelationFilter'
    following: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FollowWhereInputRecursive4', List['FollowWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['FollowWhereInputRecursive4']
    OR: List['FollowWhereInputRecursive4']
    NOT: List['FollowWhereInputRecursive4']


class FollowWhereInputRecursive4(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    followerId: Union[_str, 'types.StringFilter']
    followingId: Union[_str, 'types.StringFilter']
    follower: 'UserRelationFilter'
    following: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Follow types


    

class FollowScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    followerId: Union[_str, 'types.StringWithAggregatesFilter']
    followingId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FollowScalarWhereWithAggregatesInputRecursive1']
    OR: List['FollowScalarWhereWithAggregatesInputRecursive1']
    NOT: List['FollowScalarWhereWithAggregatesInputRecursive1']


class FollowScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    followerId: Union[_str, 'types.StringWithAggregatesFilter']
    followingId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FollowScalarWhereWithAggregatesInputRecursive2']
    OR: List['FollowScalarWhereWithAggregatesInputRecursive2']
    NOT: List['FollowScalarWhereWithAggregatesInputRecursive2']


class FollowScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    followerId: Union[_str, 'types.StringWithAggregatesFilter']
    followingId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FollowScalarWhereWithAggregatesInputRecursive3']
    OR: List['FollowScalarWhereWithAggregatesInputRecursive3']
    NOT: List['FollowScalarWhereWithAggregatesInputRecursive3']


class FollowScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    followerId: Union[_str, 'types.StringWithAggregatesFilter']
    followingId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FollowScalarWhereWithAggregatesInputRecursive4']
    OR: List['FollowScalarWhereWithAggregatesInputRecursive4']
    NOT: List['FollowScalarWhereWithAggregatesInputRecursive4']


class FollowScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    followerId: Union[_str, 'types.StringWithAggregatesFilter']
    followingId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class FollowGroupByOutput(TypedDict, total=False):
    id: _str
    followerId: _str
    followingId: _str
    createdAt: datetime.datetime
    _sum: 'FollowSumAggregateOutput'
    _avg: 'FollowAvgAggregateOutput'
    _min: 'FollowMinAggregateOutput'
    _max: 'FollowMaxAggregateOutput'
    _count: 'FollowCountAggregateOutput'


class FollowAvgAggregateOutput(TypedDict, total=False):
    """Follow output for aggregating averages"""


class FollowSumAggregateOutput(TypedDict, total=False):
    """Follow output for aggregating sums"""


class FollowScalarAggregateOutput(TypedDict, total=False):
    """Follow output including scalar fields"""
    id: _str
    followerId: _str
    followingId: _str
    createdAt: datetime.datetime


FollowMinAggregateOutput = FollowScalarAggregateOutput
FollowMaxAggregateOutput = FollowScalarAggregateOutput


class FollowMaxAggregateInput(TypedDict, total=False):
    """Follow input for aggregating by max"""
    id: bool
    followerId: bool
    followingId: bool
    createdAt: bool


class FollowMinAggregateInput(TypedDict, total=False):
    """Follow input for aggregating by min"""
    id: bool
    followerId: bool
    followingId: bool
    createdAt: bool


class FollowNumberAggregateInput(TypedDict, total=False):
    """Follow input for aggregating numbers"""


FollowAvgAggregateInput = FollowNumberAggregateInput
FollowSumAggregateInput = FollowNumberAggregateInput


FollowCountAggregateInput = TypedDict(
    'FollowCountAggregateInput',
    {
        'id': bool,
        'followerId': bool,
        'followingId': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

FollowCountAggregateOutput = TypedDict(
    'FollowCountAggregateOutput',
    {
        'id': int,
        'followerId': int,
        'followingId': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


FollowKeys = Literal[
    'id',
    'followerId',
    'followingId',
    'follower',
    'following',
    'createdAt',
]
FollowScalarFieldKeys = Literal[
    'id',
    'followerId',
    'followingId',
    'createdAt',
]
FollowScalarFieldKeysT = TypeVar('FollowScalarFieldKeysT', bound=FollowScalarFieldKeys)

FollowRelationalFieldKeys = Literal[
        'follower',
        'following',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields